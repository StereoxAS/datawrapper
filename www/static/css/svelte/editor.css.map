{
  "version": 3,
  "file": "editor.css",
  "sources": [
    "../../../../src/editor/nav/EditorNav.html",
    "../../../../src/editor/upload/UploadStep.html",
    "../../../../src/editor/upload/TextAreaUpload.html",
    "../../../../src/editor/upload/UploadHelp.html",
    "../../../../src/editor/upload/SelectSheet.html",
    "../../../../src/editor/visualize/VisualizeStep.html",
    "../../../../src/editor/Group.html",
    "../../../../src/editor/visualize/ChartDescription.html",
    "../../../../src/editor/describe/DescribeStep.html",
    "../../../../src/editor/describe/ComputedColumnEditor.html",
    "../../../../src/editor/describe/CustomColumnFormat.html",
    "../../../../src/controls/Checkbox.html",
    "../../../../src/controls/Select.html",
    "../../../../src/editor/describe/Histogram.html",
    "../../../../src/editor/describe/Handsontable.html",
    "../../../../src/publish/Publish.html",
    "../../../../src/editor/Help.html",
    "../../../../src/signin/SignInForm.html"
  ],
  "sourcesContent": [
    "<:Window on:popstate='popstate(event)'/>\n\n<div class=\"create-nav\">\n    {#each steps as step,i}\n    <EditorNavStep on:select=\"select(step, i)\"\n        index=\"{i+1}\" bind:step bind:steps bind:active />\n    {/each}\n</div>\n\n{#if $user.id != $authorId && $user.isAdmin}\n<div class=\"alert alert-warning\" style=\"text-align:center;margin-top:10px;\">\n This chart belongs to <a target=\"_blank\" href=\"/admin/chart/by/{$authorId}\">User {$authorId}</a>. Great power comes with great responsibility, so be careful with what you're doing!\n</div>\n{/if}\n\n<style type=\"text/css\">\n    .create-nav {\n        display: flex;\n        justify-content: space-between;\n    }\n</style>\n<script>\n    import EditorNavStep from './EditorNavStep.html';\n    import _findWhere from 'underscore-es/findWhere';\n    import {trackPageView} from '../../shared/analytics';\n\n    export default {\n        components: { EditorNavStep },\n        methods: {\n            select(step, index) {\n                this.set({active: step.id});\n                if (index === undefined) {\n                    const {steps} = this.get();\n                    index = steps.indexOf(_findWhere(steps, {id: step.id}));\n                }\n                const {lastEditStep} = this.store.get();\n                window.history.pushState({\n                    id: this.store.get().id,\n                    step: step\n                }, null, step.id);\n                this.store.set({lastEditStep: Math.max(lastEditStep, index+1)})\n                trackPageView();\n            },\n            popstate(event) {\n                if (event.state && event.state.id && event.state.step) {\n                    const {id, step} = event.state;\n                    if (id === this.store.get().id) {\n                        // same chart id\n                        this.set({active: step.id});\n                        trackPageView();\n                    } else {\n                        // it's a different chart, we need to reload\n                        window.location.href = `/edit/${id}/${step.id}`;\n                    }\n                }\n            }\n        },\n        oncreate() {\n            const {active, steps} = this.get();\n            const {lastEditStep, id} = this.store.get();\n            const step = _findWhere(steps, {id:active});\n            this.store.set({lastEditStep: Math.max(lastEditStep, steps.indexOf(step)+1)});\n            this.store.on('navigate', (step) => {\n                this.select({id:step});\n            });\n            // make sure the initial state is stored\n            window.history.replaceState({step,id}, step.title);\n        },\n        data() {\n            return {\n                steps: []\n            };\n        }\n    }\n</script>\n",
    "<div class=\"chart-editor dw-create-upload upload-data\" on:drop=\"onFileDrop(event)\" on:dragover=\"dragStart(event)\" on:dragenter=\"dragStart(event)\" on:dragend=\"resetDrag()\" on:dragleave=\"resetDrag()\">\n    {#if dragover}\n    <div class=\"draginfo\">\n        {@html __('upload / drag-csv-here')}\n    </div>\n    {/if}\n    <div class=\"row\" style=\"{dragover?'opacity: 0.5;filter:blur(6px);background:white;pointer-events:none':''}\">\n        <div class=\"span5\">\n            <div class=\"sidebar\">\n                <h3>{@html __('upload / title')}</h3>\n\n                <ul class=\"import-methods\">\n                    {#each buttons as btn}\n                    <li on:click=\"btnAction(btn)\" class=\"action {active==btn?'active':''}\">\n                        <label>\n                            {#if btn.isFileUpload}\n                            <input accept=\".csv, .tsv, .txt, .xlsx, .xls, .ods, .dbf\" on:change=\"btnUpload(btn, event)\" class=\"file-upload\" type=\"file\" />\n                            {/if}\n                            <i class=\"{btn.icon}\"></i>\n                            <span>{btn.title}</span>\n                        </label>\n                    </li>\n                    {/each}\n                </ul>\n\n                {#if error}\n                <div class=\"alert alert-error\">\n                    <div class=\"action close\" on:click=\"set({error:false})\">âœ•</div>\n                    {@html error}\n                </div>\n                {/if}\n\n                <h4>{active.longTitle || active.title}</h4>\n\n                <svelte:component this={Sidebar}\n                    bind:chartData\n                    bind:readonly\n                    bind:sheets\n                    bind:datasets />\n\n            </div>\n        </div>\n        <div class=\"span7\">\n\n            <svelte:component this={MainPanel}\n                bind:chartData\n                bind:readonly />\n\n            <div class=\"buttons pull-right\">\n                <a href=\"describe\" class=\"submit btn btn-primary\" id=\"describe-proceed\"> {__(\"Proceed\")} <i class=\"icon-chevron-right icon-white\"></i></a>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    /* global dw */\n    import TextAreaUpload from './TextAreaUpload.html';\n    import UploadHelp from './UploadHelp.html';\n    import SelectSheet from './SelectSheet.html';\n    import readFile from '../../shared/readFile';\n    import readSpreadsheet from '../../shared/readSpreadsheet';\n    import {putJSON} from '../../shared/utils';\n    import {__} from '../../shared/l10n';\n\n    let app;\n\n    const coreUploads = [{\n        id: 'copy',\n        title: __('upload / copy-paste'),\n        longTitle: __('upload / copy-paste / long'),\n        icon: 'fa fa-clipboard',\n        mainPanel: TextAreaUpload,\n        sidebar: UploadHelp,\n        action() {}\n    },{\n        id: 'upload',\n        title: __('upload / upload-csv'),\n        longTitle: __('upload / upload-csv / long'),\n        icon: 'fa-file-excel-o fa',\n        mainPanel: TextAreaUpload,\n        sidebar: UploadHelp,\n        isFileUpload: true,\n        onFileUpload(event) {\n            const file = event.target.files[0];\n            if (file.type.substr(0,5) === 'text/' || file.name.substr(file.name.length - 4) === \".csv\") {\n                app.set({Sidebar: UploadHelp});\n                readFile(file, (err, result) => {\n                    putJSON(`/api/charts/${dw.backend.currentChart.get('id')}/data`, result, () => {\n                        window.location.href = 'describe';\n                    });\n                });\n            } else if (file.type.substr(0,12) === 'application/') {\n                app.set({Sidebar: SelectSheet, sheets:[]}); // reset\n                readSpreadsheet(file, (err, sheets) => {\n                    if (err) return app.set({error: err});\n                    app.set({sheets});\n                });\n            } else {\n                // console.log(file.type);\n                // console.log(file);\n                app.set({error: __('upload / csv-required')});\n            }\n        },\n        action() {}\n    }];\n\n    export default {\n        oncreate() {\n            app = this;\n            const chart = this.store;\n            const method = chart.getMetadata('data.upload-method', 'copy');\n            this.set({defaultMethod: method});\n            coreUploads.forEach(u => {\n                if (u.id === method) {\n                    this.set({active:u});\n                }\n            });\n        },\n        data() {\n            return {\n                dragover: false,\n                MainPanel: TextAreaUpload,\n                Sidebar: UploadHelp,\n                active: coreUploads[0],\n                buttons: coreUploads,\n                sheets: [],\n                chart: {\n                    id: ''\n                },\n                readonly: false,\n                chartData: '',\n                transpose: false,\n                firstRowIsHeader: true,\n                skipRows: 0\n            }\n        },\n        helpers: { __ },\n        methods: {\n            addButton (btn) {\n                coreUploads.push(btn);\n                this.set({buttons:coreUploads});\n                const {defaultMethod} = this.get();\n                if (btn.id === defaultMethod) {\n                    this.btnAction(btn);\n                }\n            },\n            btnAction (btn) {\n                const chart = this.store;\n                this.set({active:btn});\n                if (btn.id === 'copy') {\n                    // turn off externalData, if still set\n                    if (chart.get('externalData')) {\n                        chart.set({ externalData: '' });\n                    }\n                }\n                let activeKey = btn.id;\n                if (btn.id === 'upload') {\n                    activeKey = 'copy';\n                    setTimeout(() => {\n                    // reset after 1sec\n                        // this.set({active:coreUploads[0]});\n                    }, 1000);\n                }\n                chart.setMetadata('data.upload-method', activeKey);\n                if (btn.action) btn.action();\n                if (btn.mainPanel) this.set({MainPanel:btn.mainPanel});\n                if (btn.sidebar) this.set({Sidebar:btn.sidebar});\n            },\n            btnUpload (btn, event) {\n                if (btn.onFileUpload) btn.onFileUpload(event);\n            },\n            dragStart (event) {\n                const {active} = this.get();\n                if (active.id === 'copy') {\n                    event.preventDefault();\n                    this.set({dragover:true});\n                }\n            },\n            resetDrag () {\n                this.set({dragover:false});\n            },\n            onFileDrop (event) {\n                const {active} = this.get();\n                if (active.id !== 'copy') return;\n                // Prevent default behavior (Prevent file from being opened)\n                this.resetDrag();\n                event.preventDefault();\n                const files = [];\n                if (event.dataTransfer.items) {\n                    // Use DataTransferItemList interface to access the file(s)\n                    for (let i=0; i<event.dataTransfer.items.length; i++) {\n                        // If dropped items aren't files, reject them\n                        if (event.dataTransfer.items[i].kind === 'file') {\n                            files.push(event.dataTransfer.items[i].getAsFile());\n                        }\n                    }\n                    event.dataTransfer.items.clear();\n                } else {\n                    // Use DataTransfer interface to access the file(s)\n                    for (let i=0; i<event.dataTransfer.files.length; i++) {\n                        files.push(event.dataTransfer.files[i]);\n                    }\n                    event.dataTransfer.items.clear();\n                }\n                const chart = this.store;\n                for (let i=0; i<files.length; i++) {\n                    if (files[i].type.substr(0,5) === 'text/') {\n                        return readFile(files[i], (err, result) => {\n                            chart.set({_rawData: result});\n                            chart.storeData(() => {\n                                setTimeout(() => {\n                                    chart.fire('navigate', 'describe');\n                                }, 500);\n                            })\n                        });\n                    }\n                }\n            }\n        }\n    };\n</script>\n\n<style>:global(.not-happy) {\n  margin-top: 15px;\n  font-size: 12px;\n}\n:global(.not-happy) a {\n  font-weight: bold;\n}\n.import-methods {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n.import-methods .action {\n  color: #1d81a2;\n  text-align: center;\n  min-height: 50px;\n  width: calc(25% - 20px);\n  margin: 0 10px 10px 0;\n  padding: 15px 0 10px;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  vertical-align: top;\n  cursor: pointer;\n}\n.import-methods .action:hover,\n.import-methods .action.active {\n  background: #fff;\n  border-radius: 4px;\n}\n.import-methods .action.active {\n  color: #222;\n  cursor: default;\n}\n.import-methods .action > label {\n  margin-top: -10px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  margin-bottom: -10px;\n}\n.import-methods .action > label > i {\n  display: block;\n  margin: 0 auto;\n  font-size: 24px !important;\n}\n.import-methods .action > label > i.fa {\n  position: relative;\n  top: -2px;\n}\n.import-methods .action > label > span {\n  font-size: 12px;\n  line-height: 15px;\n  display: block;\n  padding: 4px 10px 0;\n}\n.import-methods .file-upload {\n  opacity: 0;\n  position: absolute;\n  z-index: -1;\n}\n.draginfo {\n  pointer-events: none;\n  height: 0;\n  position: relative;\n  top: 120px;\n  font-size: 45px;\n  width: 100%;\n  text-align: center;\n  z-index: 10;\n  font-weight: 100;\n}\n:global(.sidebar) h4 {\n  font-size: 17px;\n  font-weight: 400;\n}\n</style>\n",
    "<form class=\"upload-form\">\n\n    <div class=\"control-group\">\n        <textarea bind:value=\"$_rawData\" readonly=\"{readonly}\" id=\"upload-data-text\" style=\"resize:none\" placeholder=\"{placeholder}\"></textarea>\n    </div>\n\n</form>\n\n<script>\n    import {__} from '../../shared/l10n';\n\n    export default {\n        data() {\n            return {\n                placeholder: __(\"upload / paste here\"),\n            }\n        },\n        helpers: { __ }\n    }\n</script>\n\n<style>\ntextarea#upload-data-text {\n    height: 260px;\n}\n</style>\n",
    "<p>{ __(\"upload / quick help\") }</p>\n\n<div class=\"demo-datasets\">\n    <p>{ __(\"upload / try a dataset\") }</p>\n    <select disabled=\"{readonly}\" id=\"demo-datasets\" bind:value=\"selectedDataset\">\n        <option value=\"--\">{ __(\"upload / sample dataset\") }</option>\n        {#each datasetsArray as group}\n        <optgroup label=\"{group.type}\">\n            {#each group.datasets as dataset}\n            <option value=\"{dataset}\" class=\"demo-dataset\">{dataset.title}</option>\n        {/each}\n        </optgroup>\n        {/each}\n    </select>\n</div>\n\n<style>\n    select { width: 70%; }\n</style>\n\n<script>\n    import {__} from '../../shared/l10n';\n\n    /* globals dw */\n    export default {\n        data() {\n            return {\n                selectedDataset: '--'\n            };\n        },\n        helpers: { __ },\n        onupdate({changed, current}) {\n            if (changed.selectedDataset && current.selectedDataset !== '--') {\n                const sel = current.selectedDataset;\n                this.set({chartData: sel.data});\n                if (sel.presets) {\n                    Object.keys(sel.presets).forEach(k => {\n                        dw.backend.currentChart.set(k, sel.presets[k]);\n                    });\n                }\n            }\n        },\n        computed: {\n            datasetsArray({ datasets }) {\n                return Object.keys(datasets).map(k => datasets[k]);\n            }\n        },\n    }\n</script>\n",
    "<div>\n    {#if !sheets.length}\n    <div class=\"alert alert-info\">{@html __('upload / parsing-xls') }</div>\n    {:elseif sheets.length>1}\n    <p>{ __(\"upload / select sheet\") }</p>\n    <select bind:value=\"selected\" disabled=\"{!sheets.length}\">\n        {#each sheets as sheet}\n            <option value=\"{sheet}\">{sheet.name}</option>\n        {/each}\n    </select>\n    {:else}\n    <p>{@html __('upload / xls / uploading data')}</p>\n    {/if}\n</div>\n\n<style>\n    select { width: 70%; }\n</style>\n\n<script>\n    import {__} from '../../shared/l10n';\n    import {putJSON} from '../../shared/utils';\n\n    /* globals dw */\n    export default {\n        data() {\n            return {\n                selected: false,\n                sheets: []\n            }\n        },\n        helpers: { __ },\n        onupdate({changed, current}) {\n            if (changed.sheets && current.sheets.length > 1) {\n                setTimeout(() => {\n                    this.set({selected:current.sheets[0]});\n                }, 300);\n            } else if (changed.sheets && current.sheets.length === 1) {\n                putJSON(`/api/charts/${dw.backend.currentChart.get('id')}/data`, current.sheets[0].csv, () => {\n                    window.location.href = 'describe';\n                });\n            }\n            if (changed.selected) {\n                this.set({chartData: current.selected.csv});\n            }\n        }\n    }\n</script>\n",
    "<div class=\"dw-create-visualize chart-editor chart-editor-web\">\n    <div class=\"row\">\n        <div class=\"span4 visconfig\" style=\"min-height: 516px;\">\n            <ul class=\"nav nav-tabs visualize-nav-tabs\" data-target=\"tab-container\">\n                <li class=\"{active==='vis'?'active':''}\"><a on:click=\"tabNav(event, 'vis')\" href=\"#vis\">{@html __('Chart type')}</a></li>\n                <li class=\"{active==='refine'?'active':''}\"><a on:click=\"tabNav(event, 'refine')\" href=\"#refine\">{@html __('Refine')}</a></li>\n                <li class=\"{active==='annotate'?'active':''}\"><a on:click=\"tabNav(event, 'annotate')\" href=\"#annotate\" >{@html __('Annotate')}</a></li>\n                <li class=\"{active==='design'?'active':''}\"><a on:click=\"tabNav(event, 'design')\" href=\"#design\" >{@html __('Design')}</a></li>\n            </ul>\n\n            <div class=\"tab-container\">\n                <div class=\"section {active}\">\n                    {#if active === 'vis'}\n                        <VisSelector />\n                        <p>\n                            <b>{__(\"Hint\")}:</b> {@html __(\"visualize / transpose-hint\").replace('[LINK]','<a href=\"#\" id=\"btn-transpose\"><img style=\"height:14px\" src=\"/static/css/chart-editor/transpose.png\" />').replace('[/LINK]', '</a>')}\n                        </p>\n                    {:elseif active == 'refine'}\n                        REFINE\n                    {:elseif active == 'annotate'}\n                        <div class=\"story\">\n                            <Group label=\"{__('Annotate your chart')}\">\n                                <ChartDescription />\n                            </Group>\n                        </div>\n                    {:elseif active == 'design'}\n                        DESIGN\n                    {/if}\n                </div>\n            </div>\n\n\n        </div>\n\n        <div class=\"span8\">\n            PREVIEW\n        </div>\n\n    </div>\n</div>\n\n<script>\n    import {__} from '../../shared/l10n';\n    import Group from '../Group.html';\n    import VisSelector from './VisSelector.html';\n    import ChartDescription from './ChartDescription.html';\n\n    export default {\n        helpers: { __ },\n        components: {VisSelector, ChartDescription, Group},\n        methods: {\n            tabNav(event, id) {\n                event.preventDefault();\n                this.set({active:id});\n            }\n        },\n        data() {\n            return {\n                active: 'vis'\n            }\n        }\n    }\n</script>\n\n<style>\n    .section {\n        clear:both;\n        margin-top: 20px;\n    }\n</style>\n",
    "<div class=\"vis-option-type-group {open?'group-open':''} {notoggle?'notoggle':''}\">\n    <label class=\"group-title\" on:click=\"toggle()\">\n        {#if !notoggle}\n        <i class=\"fa fa-chevron-up expand-group pull-right\"></i>\n        <i class=\"fa fa-chevron-down collapse-group pull-right\"></i>\n        {/if}\n        {@html label }</label>\n\n    {#if open}\n    <div class=\"option-group-content vis-option-type-chart-description\">\n        <slot></slot>\n    </div>\n    {/if}\n</div>\n\n<style>.vis-option-type-group {\n  margin-bottom: 30px !important;\n}\n.vis-option-type-group.notoggle .group-title {\n  font-size: 18px;\n  font-weight: 400!important;\n  border-top: 0!important;\n  padding-left: 0!important;\n}\n.vis-option-type-group.group-open label.group-title {\n  margin-bottom: 5px !important;\n}\n</style>\n\n<script>\n    export default {\n        methods: {\n            toggle() {\n                if (this.get().notoggle) return;\n                const {open, id} = this.get();\n                if (id) {\n                    const visGroups = JSON.parse(window.localStorage.getItem('dw-vis-groups')) || {};\n                    if (!visGroups['locator-map']) visGroups['locator-map'] = {};\n                    visGroups['locator-map'][id] = visGroups['locator-map'][id] == 'open' ? 'closed' : 'open';\n                    window.localStorage.setItem('dw-vis-groups', JSON.stringify(visGroups));\n                }\n                this.set({open:!open});\n            }\n        },\n        oncreate() {\n            const {id, notoggle} = this.get() || {};\n            if (notoggle) return;\n            if (id) {\n                const visGroups = JSON.parse(window.localStorage.getItem('dw-vis-groups')) || {};\n                if (visGroups['locator-map'] && visGroups['locator-map'][id]) {\n                    this.set({open: visGroups['locator-map'][id] != 'closed'});\n                }\n            }\n        },\n        data() {\n            return {\n                notoggle: false,\n                id: false,\n                open: true\n            };\n        }\n    }\n</script>\n",
    "<div class=\"story-title control-group\">\n    <div class=\"pull-left\" style=\"position: relative;\">\n        <label class=\"hide-title\"><input type=\"checkbox\"> hide</label>\n        <label class=\"control-label\" for=\"text-title\">{__('Title')}</label>\n        <input bind:value=\"$title\" class=\"input-xlarge span4\" autocomplete=\"off\" type=\"text\">\n\n        <label class=\"control-label\" for=\"text-intro\">{__('Description')}</label>\n        <textarea bind:value=\"$metadata.describe.intro\" id=\"text-intro\" class=\"input-xlarge span4\"></textarea>\n\n        <label class=\"control-label\" for=\"text-notes\">{__('Notes')}</label>\n        <input bind:value=\"$metadata.annotate.notes\" class=\"input-xlarge span4\" type=\"text\">\n    </div>\n\n    <div class=\"row\">\n        <div class=\"span2\">\n            <label class=\"control-label\">{__('Source name')}</label>\n            <input bind:value=\"$metadata.describe['source-name']\" class=\"span2\" placeholder=\"{__('name of the organisation')}\" type=\"text\">\n        </div>\n        <div class=\"span2\">\n            <label class=\"control-label\">{__('Source URL')}</label>\n            <input bind:value=\"$metadata.describe['source-url']\" class=\"span2\" placeholder=\"{__('URL of the dataset')}\" type=\"text\">\n        </div>\n    </div>\n\n    <div class=\"chart-byline\">\n        <label class=\"control-label\">{__('visualize / annotate / byline')}</label>\n        <input bind:value=\"$metadata.describe.byline\" class=\"input-xlarge span4\" placeholder=\"{__('visualize / annotate / byline / placeholder')}\" type=\"text\">\n    </div>\n</div>\n\n<script>\n    import {__} from '../../shared/l10n';\n\n    export default {\n        helpers: { __ },\n    }\n\n</script>\n\n<style type=\"text/css\">\n    .hide-title {\n        display: block;position: absolute;right: 0;top: 0;font-size: 12px;color: #777;\n    }\n</style>\n",
    "<div class=\"chart-editor\">\n    <div class=\"row\">\n        <div class=\"span4\">\n            <div class=\"sidebar\">\n\n            {#if activeColumn}\n                {#if customColumn}\n\n                <ComputedColumnEditor\n                    on:updateTable=\"refs.hot.update()\"\n                    on:renderTable=\"refs.hot.render()\"\n                    on:unselect=\"set({activeColumn:false})\"\n                    bind:column=\"customColumn\"\n                    bind:columns />\n\n                <button on:click=\"force(event, true)\" class=\"btn\">{__(\"describe / edit-format\")}</button>\n\n                {:elseif columnFormat}\n\n                <CustomColumnFormat\n                    on:updateTable=\"refs.hot.update()\"\n                    on:renderTable=\"refs.hot.render()\"\n                    bind:column=\"columnFormat\"\n                    bind:columns />\n\n                    {#if columnFormat.isComputed}\n                    <button class=\"btn\" on:click=\"force(event, false)\"><i class=\"fa  fa-chevron-left\"></i> {__(\"describe / edit-formula\")}</button>\n                    {/if}\n\n                {/if}\n\n                {#if activeColumn.type() == 'number'}\n                <Histogram bind:values=\"activeValues\" bind:format=\"activeFormat\" />\n                {/if}\n\n            {:elseif multiSelection}\n\n                <h3 class=\"first\">{__(\"describe / show-hide-multi\")}</h3>\n\n                <ul class=\"unstyled\">\n                    <li style=\"margin-bottom: 5px\">\n                        <button class=\"btn\" on:click=\"hideMultiple(multiSelection, false)\">\n                            <i class=\"fa fa-eye\"></i> {__(\"describe / show-selected\")}\n                        </button>\n                    </li>\n                    <li>\n                        <button class=\"btn\" on:click=\"hideMultiple(multiSelection, true)\">\n                            <i class=\"fa fa-eye-slash\"></i> {__(\"describe / hide-selected\")}\n                        </button>\n                    </li>\n                </ul>\n\n            {:else}\n\n                <h3 class=\"first\">{ __(\"Make sure the data looks right\") }</h3>\n\n                <p>{@html __(\"describe / data-looks-right\") }</p>\n\n                <Checkbox\n                    label=\"{ __(\"First row as label\") }\"\n                    bind:value=\"$metadata.data['horizontal-header']\" />\n\n                <h4>{__(\"describe / locale-select / hed\")}</h4>\n\n                <p>{@html __(\"describe / locale-select / body\")}</p>\n\n                <select bind:value=\"$language\">\n                    {#each $locales as locale}\n                    <option value=\"{locale.value}\">{locale.label} ({locale.value})</option>\n                    {/each}\n                </select>\n\n            {/if}\n\n                <hr>\n\n                <div class=\"btn-group\">\n                    <a class=\"btn submit\" href=\"upload\"><i class=\"icon-chevron-left\"></i> {__(\"Back\")}</a>\n                    <a href=\"visualize\" class=\"submit btn btn-primary\" id=\"describe-proceed\"> {__(\"Proceed\")} <i class=\"icon-chevron-right icon-white\"></i></a>\n                </div>\n\n            </div>\n        </div>\n        <div class=\"span8\">\n\n            <div class=\"help\">\n                {@html __('describe / info-table-header')} <img src=\"/static/img/arrow.svg\" />\n            </div>\n            <div class=\"pull-right\" style=\"margin-bottom: 10px\">\n\n                <div class=\"sort-box\">\n                    <div class=\"btn-group\" ref:sortDropdownGroup>\n                        <button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\">\n                           {@html __('describe / sort-by')}â€¦ <span class=\"caret\"></span>\n                        </button>\n                        <ul class=\"dropdown-menu sort-menu\">\n                            <li class=\"{'-'==sortBy?'active':''}\"><a on:click=\"sort(event, '-')\" href=\"#s\">{@html __('describe / no-sorting')}</a></li>\n                            {#each columns as col}\n                            <li class=\"{col.name()==sortBy?'active':''}\"><a on:click=\"sort(event, col.name(), true)\" href=\"#/{col.name()}\">\n                                <i on:click=\"sort(event, col.name(), true)\" class=\"fa fa-sort-{col.type()=='text'?'alpha':'amount'}-asc fa-fw\"></i>\n                                <i on:click=\"sort(event, col.name(), false)\" class=\"fa fa-sort-{col.type()=='text'?'alpha':'amount'}-desc fa-fw\"></i>&nbsp;&nbsp;&nbsp;{col.title()}</a></li>\n                            {/each}\n                        </ul>\n                    </div>\n                </div>\n\n                <div class=\"search-box form-search\">\n                    <i class=\"im im-magnifier\"></i>\n                    <div class=\"{searchResults.length > 0 ? 'input-append' : ''}\">\n                        <input autocomplete=\"screw-you-google-chrome\" type=\"search\" on:keypress=\"keyPress(event)\" placeholder=\"{__('Search data table')}\" bind:value=\"search\" ref:search class=\"{searchResults.length > 0?'with-results':''} search-query\" />\n                        {#if searchResults.length > 0}\n                        <div class=\"btn-group\">\n                          <button class=\"btn\" on:click=\"nextResult(-1)\">\n                            <i class=\"fa fa-chevron-up\"></i></button>\n                          <button class=\"btn\" on:click=\"nextResult(+1)\">\n                            <i class=\"fa fa-chevron-down\"></i></button>\n                        </div>\n                        {/if}\n                    </div>\n\n                    {#if search}\n                    <div class=\"results\">\n                        {#if searchResults.length > 0}\n                            {searchIndexSafe+1}\n                            {__(\"describe / search / of\") }\n                            {searchResults.length}\n                            {__(\"describe / search / results\") }\n                        {:elseif search}\n                            { __(\"describe / search / no-matches\") }\n                        {/if}\n                    </div>\n                    {/if}\n                </div>\n\n            </div>\n\n            <Handsontable ref:hot\n                bind:data=\"chartData\"\n                bind:transpose=\"$metadata.data.transpose\"\n                bind:firstRowIsHeader=\"$metadata.data['horizontal-header']\"\n                bind:fixedColumnsLeft\n                bind:activeColumn\n                bind:readonly\n                bind:sorting\n                bind:search\n                bind:searchResults\n                bind:searchIndex\n                bind:multiSelection\n                on:resetSort=\"set({sortBy:'-'})\" />\n\n            <div class=\"buttons below-table pull-right\">\n                <button class=\"btn transpose\" on:click=\"toggleTranspose()\"><img src=\"/static/css/chart-editor/transpose.png\"> {__(\"describe / transpose-long\")}</button>\n\n                <button on:click=\"addComputedColumn()\" class=\"btn computed-columns\"><i class=\"fa fa-calculator\"></i> {__(\"computed columns / add-btn\")}â€¦</button>\n\n                <button on:click=\"revertChanges()\" class=\"btn {has_changes?'':'disabled'}\" id=\"reset-data-changes\"><i class=\"fa fa-undo\"></i> {__(\"Revert changes\")}...</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    import ComputedColumnEditor from './ComputedColumnEditor.html';\n    import CustomColumnFormat from './CustomColumnFormat.html';\n    import Histogram from './Histogram.html';\n    import Handsontable from './Handsontable.html';\n    import Checkbox from '../../controls/Checkbox.html';\n\n    import {__} from '../../shared/l10n';\n    import {arrayToObject} from '../../shared/utils.js';\n    import clone from '../../shared/clone.js';\n\n    let _chart;\n\n    export default {\n        components: {\n            Handsontable, Checkbox, ComputedColumnEditor,\n            CustomColumnFormat, Histogram },\n        helpers: { __ },\n        computed: {\n            searchIndexSafe ({ searchIndex, searchResults }) {\n                if (searchIndex<0) searchIndex+=searchResults.length;\n                searchIndex = searchIndex % searchResults.length;\n                return searchIndex;\n            },\n            customColumn ({ activeColumn, forceColumnFormat }) {\n                return activeColumn && !forceColumnFormat && activeColumn.isComputed ? activeColumn : false;\n            },\n            columnFormat ({ activeColumn, forceColumnFormat }) {\n                return activeColumn && (!activeColumn.isComputed || forceColumnFormat) ? activeColumn : false;\n            },\n            activeValues ({ activeColumn }) {\n                return activeColumn ? activeColumn.values() : [];\n            },\n            activeFormat ({ activeColumn }) {\n                return activeColumn ? _chart.columnFormatter(activeColumn) : d => d;\n            },\n            columns({ activeColumn, $dataset }) {\n                const ds = $dataset;\n                if (!activeColumn) return ds && ds.columns ? ds.columns() : [];\n                try {\n                    return ds.columns().filter(col => !col.isComputed);\n                } catch(e) {\n                    return [];\n                }\n            },\n            sorting ({ sortBy, sortDir }) {\n                return {sortBy,sortDir};\n            }\n        },\n        oncreate() {\n            // we keep a reference to the store bc we can't access\n            // the store methods in computed columns\n            _chart = this.store;\n            window.addEventListener('keypress', (event) => {\n                if (event.ctrlKey && event.key === 'f') {\n                    event.preventDefault();\n                    if (this.refs.search !== window.document.activeElement) {\n                        this.refs.search.focus();\n                    } else {\n                        this.nextResult(+1);\n                    }\n                }\n            });\n        },\n        onstate({changed, current}) {\n            if (changed.activeColumn && current.activeColumn) {\n                this.set({forceColumnFormat:false});\n            }\n        },\n        methods: {\n            nextResult (diff) {\n                let {searchIndex, searchResults} = this.get();\n                searchIndex += diff;\n                if (searchIndex<0) searchIndex+=searchResults.length;\n                searchIndex = searchIndex % searchResults.length;\n                this.set({searchIndex});\n            },\n            keyPress (event) {\n                if (event.key === 'F3' || event.key === 'Enter')\n                    this.nextResult(event.shiftKey ? -1 : 1);\n            },\n            toggleTranspose() {\n                this.set({activeColumn: false});\n                this.set({transpose: !this.get().transpose});\n                setTimeout(() => this.refs.hot.update(), 500);\n                // ;\n            },\n            revertChanges() {\n                this.store.setMetadata('data.changes', []);\n                this.refs.hot.update();\n            },\n            cmFocus () {\n                setTimeout(() => {\n                    this.refs.hot.get().hot.render();\n                }, 100);\n            },\n            addComputedColumn() {\n                const chart = this.store;\n                const ds = chart.dataset();\n                const computed = arrayToObject(\n                    chart.getMetadata('describe.computed-columns', {})\n                );\n                // find new id\n                let i = 1;\n                while (ds.hasColumn(`Column ${i}`)) { i++; }\n                const id = `Column ${i}`;\n                computed[id] = '';\n                chart.setMetadata('describe.computed-columns', computed);\n                //\n                const ds2 = chart.dataset(true);\n                this.refs.hot.update();\n                this.set({ activeColumn: ds2.column(id) });\n            },\n            sort(event, col, ascending) {\n                event.preventDefault();\n                event.stopPropagation();\n                this.set({sortBy: col, sortDir: ascending});\n                // hide the dropdown menu\n                this.refs.sortDropdownGroup.classList.remove('open');\n            },\n            force(event, val=true) {\n                event.preventDefault();\n                this.set({forceColumnFormat:val});\n            },\n            hideMultiple(columns, hide) {\n                const chart = this.store;\n                const colFmt = clone(chart.getMetadata('data.column-format', {}));\n                columns.forEach(col => {\n                    if (colFmt[col.name()]) colFmt[col.name()].ignore = hide;\n                    else {\n                        colFmt[col.name()] = {type:'auto',ignore:hide};\n                    }\n                });\n                chart.setMetadata('data.column-format', colFmt);\n                setTimeout(() => {\n                    this.refs.hot.get().hot.render();\n                }, 10);\n                this.set({multiSelection: false});\n            }\n        },\n        data() {\n            return {\n                search: '',\n                chartData: '',\n                readonly: false,\n                searchIndex: 0,\n                activeColumn: false,\n                customColumn: false,\n                columnFormat: false,\n                multiSelection: false,\n                forceColumnFormat: false,\n                fixedColumnsLeft: 0,\n                has_changes: false,\n                searchResults: [],\n                sortBy: '-',\n                sortDir: true,\n            };\n        }\n    };\n</script>\n\n<style>.help {\n  display: inline-block;\n  font-style: italic;\n  line-height: 0px;\n  color: #aaa;\n}\n.below-table {\n  margin-top: 20px;\n}\n.span8 {\n  padding-top: 1em;\n}\n.btn.transpose img {\n  width: 12px;\n  vertical-align: baseline;\n}\n.sort-box {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 1ex;\n}\n.sort-box .sort-menu li a .fa {\n  opacity: 0.5;\n}\n.sort-box .sort-menu li a .fa:hover {\n  opacity: 1;\n}\n.sort-box .dropdown-menu > li > a {\n  padding: 3px 20px 3px 10px;\n}\n.search-box {\n  display: inline-block;\n  vertical-align: top;\n  position: relative;\n}\n.search-box .results {\n  color: gray;\n  display: inline-block;\n  vertical-align: text-bottom;\n  margin-left: 1ex;\n  margin-right: 1ex;\n}\n.search-box input {\n  padding-left: 26px;\n  width: 24ex;\n  border-radius: 15px;\n}\n.search-box input.with-results {\n  width: 18ex;\n  border-bottom-right-radius: 0px;\n  border-top-right-radius: 0px;\n}\n.search-box .im-magnifier {\n  position: absolute;\n  left: 8px;\n  top: 9px;\n  color: #bbb;\n  font-size: 16px;\n  z-index: 4;\n}\n.search-box .btn-group .btn {\n  padding-left: 6px;\n  padding-right: 6px;\n}\n.search-box .btn-group .btn:first-child {\n  border-radius: 0;\n}\n.search-box .btn-group .btn:last-child {\n  border-bottom-right-radius: 15px;\n  border-top-right-radius: 15px;\n  padding-right: 9px;\n}\n:global(html .form-horizontal .control-group) {\n  margin-bottom: 10px;\n}\n:global(.vis-option-type-checkbox) label {\n  display: inline-block;\n  width: auto!important;\n}\n:global(.sidebar span.type-hl) {\n  background-color: white;\n  padding: 0 3px;\n  font-family: 'Roboto Mono';\n  border: 1px solid #cccccc;\n}\n</style>\n\n",
    "<div style=\"margin-bottom: 15px\">\n    <h3 class=\"first\">{title}</h3>\n    <p>{__(\"computed columns / modal / intro\")}</p>\n\n    <label>{__(\"computed columns / modal / name\")}</label>\n    <input type=\"text\" bind:value=\"name\" />\n\n    <label>{__(\"computed columns / modal / formula\")}</label>\n    <textarea ref:code class=\"code\"></textarea>\n\n    <p style=\"margin-top: 1em\">{__(\"computed columns / modal / available columns\")}:</p>\n\n    <ul class=\"col-select\">\n        {#each metaColumns as col}\n        <li on:click=\"insert(col)\">{col.key}</li>\n        {/each}\n    </ul>\n</div>\n\n<button on:click=\"removeColumn()\" class=\"btn btn-danger\"><i class=\"fa fa-trash\"></i> {__(\"computed columns / modal / remove\")}</button>\n\n<style>label {\n  font-weight: bold;\n}\n.col-select {\n  padding: 0;\n  margin: 0;\n}\n.col-select li {\n  font-family: 'Roboto mono';\n  display: inline-block;\n  /*color: #1d81a2;*/\n  cursor: pointer;\n  margin: 0px 1ex 1ex 0;\n  font-size: 12px;\n  line-height: 15px;\n  background: #1d81a2;\n  color: white;\n  padding: 2px 5px;\n  border-radius: 2px;\n}\n.col-select li:hover {\n  background: #18a1cd;\n}\n:global(.CodeMirror) {\n  border-radius: 1px;\n  width: 95%;\n  height: 130px;\n  padding: 0px 3px;\n  border: 1px solid #cccccc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  transition: border linear 0.2s, box-shadow linear 0.2s;\n  background-color: #ffffff;\n}\n:global(.CodeMirror) .CodeMirror-nonmatchingbracket {\n  color: inherit;\n  background: #fcc;\n}\n:global(.CodeMirror) .CodeMirror-matchingbracket {\n  color: inherit;\n  background: #cfc;\n}\n:global(.CodeMirror) .CodeMirror-placeholder,\n:global(.CodeMirror) .cm-s-default .cm-comment {\n  color: #9C938B;\n}\n:global(.CodeMirror) .cm-variable-2 {\n  color: #18a1cd !important;\n}\n:global(.CodeMirror).CodeMirror-focused {\n  border-color: rgba(82, 168, 236, 0.8);\n  outline: 0;\n  outline: thin dotted \\9;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n  -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n}\n</style>\n\n<script>\n    import CodeMirror from 'cm/lib/codemirror';\n    import 'cm/mode/javascript/javascript';\n    import 'cm/addon/mode/simple';\n    import 'cm/addon/hint/show-hint';\n    import 'cm/addon/edit/matchbrackets';\n    import 'cm/addon/display/placeholder';\n\n    import _debounce from 'underscore-es/debounce';\n    import clone from '../../shared/clone.js';\n    import {__} from '../../shared/l10n';\n\n    export default {\n        data() {\n            return {\n                name: '',\n                formula: ''\n            }\n        },\n        helpers: { __ },\n        methods: {\n            insert (column) {\n                const {cm} = this.get();\n                cm.replaceSelection(column.key);\n                cm.focus();\n            },\n            removeColumn() {\n                const {column} = this.get();\n                const chart = this.store.get('dw_chart');\n                const ds = chart.dataset();\n                const customCols = clone(chart.get('metadata.describe.computed-columns', {}));\n                delete customCols[column.name()];\n                const col_index = ds.columnOrder()[ds.indexOf(column.name())];\n                // delete all changes that have been made to this column\n                const changes = chart.get('metadata.data.changes', []);\n                const changes_new = [];\n                changes.forEach(c => {\n                    if (c.column === col_index) return; // skip\n                    if (c.column > col_index) c.column--;\n                    changes_new.push(c);\n                });\n                chart.set('metadata.describe.computed-columns', customCols);\n                chart.set('metadata.data.changes', changes_new);\n                chart.saveSoon();\n                this.fire('updateTable');\n                this.fire('unselect');\n            }\n        },\n        computed: {\n            title({ column }) {\n                var s = __(\"describe / edit-column\");\n                return s.replace('%s', `\"${column ? column.title() || column.name() : '--'}\"`)\n            },\n            metaColumns ({ columns }) {\n                if (!columns) return [];\n                return columns.map(col => {\n                    return {\n                        key: column_name_to_var(col.name()),\n                        title: col.title(),\n                        type: col.type()\n                    };\n                });\n            },\n            keywords ({ metaColumns }) {\n                const keywords = ['sum','round','min','max','median','mean'];\n                metaColumns.forEach(function(col) {\n                    keywords.push(col.key);\n                    if (col.type === 'number') {\n                        keywords.push(col.key+'__sum');\n                        keywords.push(col.key+'__min');\n                        keywords.push(col.key+'__max');\n                        keywords.push(col.key+'__mean');\n                        keywords.push(col.key+'__median');\n                    }\n                });\n                return keywords;\n            }\n        },\n        oncreate() {\n            const {column} = this.get();\n\n            const chart = this.store.get('dw_chart');\n            const customCols = chart.get('metadata.describe.computed-columns', {});\n\n            this.set({\n                formula: customCols[column.name()] || '',\n                name: column.title()\n            });\n\n            // update if column changes\n            this.observe('column', (col) => {\n                if (col) this.set({\n                    formula: customCols[col.name()] || '',\n                    name: col.title()\n                });\n            });\n\n            const app = this;\n\n            function scriptHint(editor) {\n                // Find the token at the cursor\n                var cur = editor.getCursor(),\n                    token = editor.getTokenAt(cur),\n                    match = [];\n\n                const keywords = app.get('keywords');\n\n                if (token.type === 'variable') {\n                    match = keywords.filter(function(chk) {\n                        return chk.toLowerCase()\n                            .indexOf(token.string.toLowerCase()) === 0;\n                    });\n                }\n\n                return {\n                    list: match,\n                    from: CodeMirror.Pos(cur.line, token.start),\n                    to: CodeMirror.Pos(cur.line, token.end)\n                };\n            }\n\n            // CodeMirror.registerHelper(\"hint\", \"javascript\", function(editor, options) {\n            //     return scriptHint(editor, options);\n            // });\n\n            const cm = CodeMirror.fromTextArea(this.refs.code, {\n                value: this.get('formula') || '',\n                mode: 'simple',\n                indentUnit: 2,\n                tabSize: 2,\n                lineWrapping: true,\n                matchBrackets: true,\n                placeholder: '// enter formula here',\n                continueComments: \"Enter\",\n                extraKeys: {\n                    'Tab': 'autocomplete'\n                },\n                hintOptions: {\n                    hint: scriptHint\n                }\n            });\n\n            window.CodeMirror = CodeMirror;\n\n            this.set({cm});\n\n            const updateTable = _debounce(() => this.fire('updateTable'), 1500);\n\n            this.observe('formula', (formula) => {\n                // update codemirror\n                if (formula !== cm.getValue()) {\n                    cm.setValue(formula);\n                }\n                // update dw.chart\n                const {column} = this.get();\n                const customCols = clone(chart.get('metadata.describe.computed-columns', {}));\n                if (customCols[column.name()] !== formula) {\n                    customCols[column.name()] = formula;\n                    chart.set('metadata.describe.computed-columns', customCols);\n                    if (chart.saveSoon) chart.saveSoon();\n                    updateTable();\n                }\n            });\n\n            this.observe('name', (name) => {\n                const {column} = this.get();\n                const changes = clone(chart.get('metadata.data.changes', []));\n                const ds = chart.dataset();\n                const col = ds.columnOrder()[ds.indexOf(column.name())];\n                let last_col_name_change_i = -1;\n                changes.forEach((change,i) => {\n                    if (change.column === col && change.row === 0) {\n                        last_col_name_change_i = i;\n                    }\n                });\n                if (last_col_name_change_i > -1) {\n                    // update last change of that cell\n                    changes[last_col_name_change_i].value = name;\n                    changes[last_col_name_change_i].time = (new Date()).getTime();\n                } else {\n                    // add new change\n                    changes.push({\n                        column: col, row: 0, value: name, time: (new Date()).getTime()\n                    });\n                }\n                chart.set('metadata.data.changes', changes);\n                if (chart.saveSoon) chart.saveSoon();\n                updateTable();\n            });\n\n            cm.on('change', (cm) => {\n                this.set({formula: cm.getValue()});\n            });\n\n            this.observe('metaColumns', () => {\n                var columns_regex = new RegExp(`(?:${this.get('keywords').join('|')})`);\n                CodeMirror.defineSimpleMode(\"simplemode\", {\n                    // The start state contains the rules that are intially used\n                    start: [\n                        // The regex matches the token, the token property contains the type\n                        {regex: /\"(?:[^\\\\]|\\\\.)*?(?:\"|$)/, token: \"string\"},\n                        // You can match multiple tokens at once. Note that the captured\n                        // groups must span the whole string in this case\n                        {regex: /(function)(\\s+)([a-z$][\\w$]*)/,\n                         token: [\"keyword\", null, \"keyword\"]},\n                        // Rules are matched in the order in which they appear, so there is\n                        // no ambiguity between this one and the one above\n                        {regex: /(?:function|var|return|if|for|while|else|do|this)\\b/,\n                         token: \"keyword\"},\n                        {regex: /true|false|null|undefined/, token: \"atom\"},\n                        {regex: /0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?/i,\n                         token: \"number\"},\n                        {regex: /\\/\\/.*/, token: \"comment\"},\n                        {regex: /\\/(?:[^\\\\]|\\\\.)*?\\//, token: \"variable-3\"},\n                        // A next property will cause the mode to move to a different state\n                        {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n                        {regex: /[-+/*=<>!]+/, token: \"operator\"},\n                        // indent and dedent properties guide autoindentation\n                        {regex: /[{[(]/, indent: true},\n                        {regex: /[}\\])]/, dedent: true},\n                        {regex: columns_regex, token: 'variable-2'},\n                        {regex: /[a-z$][\\w$]*/, token: \"variable\"},\n                        // You can embed other modes with the mode property. This rule\n                        // causes all code between << and >> to be highlighted with the XML\n                        // mode.\n                        {regex: /<</, token: \"meta\", mode: {spec: \"xml\", end: />>/}}\n                    ],\n                    // The multi-line comment state.\n                    comment: [\n                        {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n                        {regex: /.*/, token: \"comment\"}\n                    ],\n                    // The meta property contains global information about the mode. It\n                    // can contain properties like lineComment, which are supported by\n                    // all modes, and also directives like dontIndentStates, which are\n                    // specific to simple modes.\n                    meta: {\n                        dontIndentStates: [\"comment\"],\n                        lineComment: \"//\"\n                    }\n                });\n\n                cm.setOption('mode', 'simplemode');\n            });\n        }\n    }\n\n    function column_name_to_var(name) {\n        // if you change this, change dw.chart.js as well\n        return name.toString().toLowerCase()\n            .replace(/\\s+/g, '_')           // Replace spaces with _\n            .replace(/[^\\w-]+/g, '')       // Remove all non-word chars\n            .replace(/-/g, '_')             // Replace - with single _\n            .replace(/__+/g, '_')         // Replace multiple _ with single _\n            .replace(/^_+/, '')             // Trim _ from start of text\n            .replace(/_+$/, '')             // Trim _ from end of text\n            .replace(/^(\\d)/, '_$1')        // If first char is a number, prefix with _\n            .replace(/^(abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|eval|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|window|with|yield)$/, '$1_'); // reserved keywords\n    }\n\n</script>\n",
    "<div>\n    <h3 class=\"first\">{title}</h3>\n\n    <div class=\"form-horizontal\">\n\n        <Select\n            label=\"{__(\"Column type\")}\"\n            options=\"{colTypes}\"\n            bind:value=\"columnFormat.type\"\n            width=\"180px\"\n            />\n\n        <Checkbox\n            label=\"{ __(\"Hide column from visualization\") }\"\n            bind:value=\"columnFormat.ignore\" />\n\n        <hr />\n\n        {#if column && column.type() == 'number'}\n        <Select\n            label=\"{__(\"Round numbers to\")}\"\n            options=\"{[\n                {value:'-',label: __(\"describe / column-format / individual\")},\n                {value:'auto',label: __(\"describe / column-format / auto-detect\") }]}\"\n            optgroups=\"{numberFormats}\"\n            bind:value=\"columnFormat['number-format']\"\n            width=\"180px\"\n            />\n        <Select\n            label=\"{__(\"Divide numbers by\")}\"\n            options=\"{divisors_opts}\"\n            optgroups=\"{divisors}\"\n            bind:value=\"columnFormat['number-divisor']\"\n            width=\"180px\"\n            />\n\n        <div class=\"control-group vis-option-type-select\">\n            <label class=\"control-label\">\n                {__(\"Prepend/Append\")}\n            </label>\n            <div class=\"controls form-inline\">\n                <input autocomplete=\"screw-you-google-chrome\" style=\"width:6ex; text-align:right\" data-lpignore=\"true\" name=\"prepend\" type=\"text\" bind:value=\"columnFormat['number-prepend']\">\n                #\n                <input autocomplete=\"screw-you-google-chrome\" style=\"width:6ex\" data-lpignore=\"true\" name=\"append\" type=\"text\" bind:value=\"columnFormat['number-append']\">\n            </div>\n        </div>\n\n        {/if}\n\n    </div>\n</div>\n\n<script>\n    /* globals dw */\n    import Checkbox from '../../controls/Checkbox.html';\n    import Select from '../../controls/Select.html';\n    import _throttle from 'underscore-es/throttle';\n    import {arrayToObject} from '../../shared/utils.js';\n    import clone from '../../shared/clone.js';\n    import {__} from '../../shared/l10n';\n\n    export default {\n        components: { Checkbox, Select },\n        helpers: { __ },\n        methods: {\n            autoDivisor() {\n                const chart = this.store.get('dw_chart');\n                const {column} = this.get();\n                const mtrSuf = dw.utils.metricSuffix(chart.locale());\n                const values = column.values();\n                const dim = dw.utils.significantDimension(values);\n                let div = dim < -2 ? (Math.round((dim*-1) / 3) * 3) :\n                            (dim > 4 ? dim*-1 : 0);\n                const nvalues = values.map(function(v) {\n                    return v / Math.pow(10, div);\n                });\n                let ndim = dw.utils.significantDimension(nvalues);\n                if (ndim <= 0) ndim = nvalues.reduce(function(acc, cur) {\n                    return Math.max(acc, Math.min(3,dw.utils.tailLength(cur)));\n                }, 0);\n\n                if (ndim === div) {\n                    div = 0;\n                    ndim = 0;\n                }\n                if (div > 15) {\n                    div = 0;\n                    ndim = 0;\n                }\n\n                this.set({\n                    columnFormat: {\n                        'number-divisor': div,\n                        'number-format': 'n'+Math.max(0, ndim),\n                        'number-prepend': '',\n                        'number-append': (div ? mtrSuf[div] || ' Ã— 10<sup>'+div+'</sup>' : '')\n                    }\n                });\n            },\n            getColumnFormat(column) {\n                const chart = this.store.get('dw_chart');\n                const columnFormats = arrayToObject(chart.get('metadata.data.column-format', {}));\n                let columnFormat = clone(columnFormats[column.name()]);\n                if (!columnFormat || columnFormat === 'auto' || columnFormat.length !== undefined) {\n                    // no valid column format\n                    columnFormat = {\n                        type: 'auto',\n                        ignore: false,\n                        'number-prepend': '',\n                        'number-append': '',\n                        'number-format': 'auto'\n                    };\n                }\n                return columnFormat;\n            }\n        },\n        computed: {\n            title({ column }) {\n                var s = __(\"describe / edit-column\");\n                return s.replace('%s', `\"${column ? column.title() || column.name() : '--'}\"`)\n            }\n        },\n        oncreate() {\n            const updateTable = _throttle(() => { this.fire('updateTable') },100, {leading: false});\n            const renderTable = _throttle(() => { this.fire('updateTable') }, 100, {leading: false});\n\n            const {column} = this.get();\n\n            this.set({colTypes: [\n                { value:'auto', label: 'auto ('+column.type()+')' },\n                { value:'text', label: 'Text' },\n                { value:'number', label: 'Number' },\n                { value:'date', label: 'Date' },\n            ]});\n\n            this.set({columnFormat: this.getColumnFormat(column)});\n\n            this.observe('column', (col) => {\n                this.set({columnFormat: this.getColumnFormat(col)});\n                const {colTypes} = this.get();\n                colTypes[0].label = 'auto ('+column.type()+')';\n            });\n\n            this.observe('columnFormat', (colFormat) => {\n                const chrt = this.store.get('dw_chart');\n                const {column} = this.get();\n                const columnFormats = arrayToObject(clone(chrt.get('metadata.data.column-format', {})));\n                const oldFormat = columnFormats[column.name()];\n                if (!oldFormat || JSON.stringify(oldFormat) !== JSON.stringify(colFormat)) {\n                    if (colFormat['number-divisor'] === 'auto') {\n                        // stop here and compute divisor automatically\n                        setTimeout(() => this.autoDivisor(), 100);\n                        return;\n                    }\n                    columnFormats[column.name()] = clone(colFormat);\n                    chrt.set('metadata.data.column-format', columnFormats);\n                    if (chrt.saveSoon) chrt.saveSoon();\n                    if (!oldFormat || oldFormat.type !== colFormat.type) updateTable();\n                    else renderTable();\n                }\n            });\n        },\n        data() {\n            return {\n                columnFormat: {\n                    type: 'auto',\n                    ignore: false,\n                    'number-divisor': '-',\n                    'number-format': 'auto',\n                    'number-prepend': '',\n                    'number-append': '',\n                },\n                colTypes: [],\n                divisors_opts: [\n                    {value:0, label: __(\"describe / column-format / no-change\") },\n                    {value:'auto', label: __(\"describe / column-format / automatic\") },\n                ],\n                divisors: [{\n                    label: __(\"describe / column-format / divide-by\"),\n                    options: [\n                        {value:3, label:'1000'},\n                        {value:6, label:'1 million'},\n                        {value:9, label:'1 billion'},\n                    ]\n                }, {\n                    label: __(\"describe / column-format / multiply-by\"),\n                    options: [\n                        {value:-2, label:'100'},\n                        {value:-3, label:'1000'},\n                        {value:-6, label:'1 million'},\n                        {value:-9, label:'1 billion'},\n                        {value:-12, label:'1 trillion'}\n                    ]\n                }],\n                numberFormats: [{\n                    label: __(\"Decimal places\"),\n                    options: [\n                        {value:'n3', label: '3 (1,234.568)'},\n                        {value:'n2', label: '2 (1,234.57)'},\n                        {value:'n1', label: '1 (1,234.6)'},\n                        {value:'n0', label: '0 (1,235)'},\n                    ]\n                }, {\n                    label: __(\"Significant digits\"),\n                    options: [\n                        {value:'s6', label:'6 (1,234.57)'},\n                        {value:'s5', label:'5 (123.45)'},\n                        {value:'s4', label:'4 (12.34)'},\n                        {value:'s3', label:'3 (1.23)'},\n                        {value:'s2', label:'2 (0.12)'},\n                        {value:'s1', label:'1 (0.01)'},\n                    ]\n                }]\n            }\n        }\n    };\n</script>\n\n\n<style>:global(.vis-option-type-select) .control-label {\n  width: 130px;\n}\n:global(.vis-option-type-select) .controls {\n  margin-left: 150px;\n}\n</style>\n\n",
    "<div class=\"control-group vis-option-group vis-option-type-checkbox\">\n    <label class=\"checkbox {disabled? 'disabled' :''} {faded? 'faded' :''}\">\n        <input type=\"checkbox\" disabled=\"{disabled}\" bind:checked=\"value\" /><span class=\"css-ui\"></span> &nbsp;{ label }\n    </label>\n</div>\n\n<style>label.checkbox {\n  text-align: left;\n  width: 100%;\n  position: relative;\n  left: 0;\n}\nlabel.checkbox input[type=checkbox] {\n  float: none;\n  opacity: 0!important;\n  pointer-events: none;\n  position: absolute;\n  display: inline-block;\n  vertical-align: sub;\n}\nlabel.checkbox input[type=checkbox] + span.css-ui {\n  display: inline-block;\n  width: 0.85em;\n  height: 0.85em;\n  border-radius: 2px;\n  border: 1px solid #bbb;\n  vertical-align: baseline;\n  position: relative;\n  top: 2px;\n  margin-left: -16px;\n}\nlabel.checkbox input[type=checkbox]:checked + span.css-ui {\n  background: #18a1cd;\n  border-color: #18a1cd;\n}\nlabel.checkbox input[type=checkbox]:checked + span.css-ui:after {\n  position: absolute;\n  display: block;\n  color: white;\n  left: 0.15em;\n  top: 0.4em;\n  font-weight: bold;\n  content: '\\e023';\n  font-family: 'iconmonstr-iconic-font';\n  font-size: 0.65em;\n  line-height: 0.8em;\n}\nlabel.checkbox input[type=checkbox]:focus + span.css-ui {\n  border-color: #18a1cd;\n  box-shadow: 0 0 1px 1px rgba(24, 161, 205, 0.55);\n}\nlabel.checkbox input[type=checkbox]:disabled + span.css-ui {\n  background: #ddd;\n  border-color: #bbb;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\nlabel.checkbox input[type=checkbox]:disabled:checked + span.css-ui {\n  border-color: #bbb;\n  background: #bbb;\n}\nlabel.checkbox.disabled,\nlabel.checkbox.faded {\n  color: #999;\n}\nlabel.checkbox.disabled input,\nlabel.checkbox.faded input {\n  opacity: 0.5;\n}\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false,\n                faded: false\n            }\n        }\n    }\n</script>\n",
    "<div class=\"control-group vis-option-type-select\">\n    <label style=\"width: {labelWidth}\" class=\"control-label {disabled? 'disabled' :''}\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline {disabled? 'disabled' :''}\">\n        <select disabled=\"{disabled}\" bind:value=\"value\" style=\"width:{ width }\">\n        {#if options.length}\n            {#each options as opt}\n                <option value=\"{opt.value}\">{opt.label}</option>\n            {/each}\n        {/if}\n        {#if optgroups.length}\n            {#each optgroups as optgroup}\n            <optgroup label=\"{optgroup.label}\">\n                {#each optgroup.options as opt}\n                    <option value=\"{opt.value}\">{opt.label}</option>\n                {/each}\n            </optgroup>\n            {/each}\n        {/if}\n        </select>\n    </div>\n</div>\n\n<style>\n    label.disabled {\n        color: #999;\n    }\n</style>\n\n<script>\n    export default {\n        data () {\n            return {\n                disabled: false,\n                width: 'auto',\n                labelWidth: 'auto',\n                options: [],\n                optgroups: [],\n            };\n        }\n    };\n</script>\n",
    "<h3>{__('describe / histogram')}</h3>\n<svg ref:svg>\n    <!-- x axis -->\n    <g transform=\"translate({[padding.left,padding.top]})\">\n        <g class='axis x-axis' transform=\"translate(0, {innerHeight})\">\n            {#each ticks as tick}\n            <g class='tick' transform='translate({xScale(tick.x)},0)'>\n                <line y2=\"3\" />\n                <text y='5'>{tick.label}</text>\n            </g>\n            {/each}\n            {#if highlight}\n            <polygon transform='translate({xScale(highlight.x)},0)' points=\"0,0,4,6,-4,6\" />\n            {/if}\n        </g>\n\n<!--         <g class='bars'>\n            {{#each bins as bin, i}}\n            <g class=\"bar\" transform=\"translate({{xScale(bin.x0)}},{{yScale(bin.length)}})\">\n                <title>{{tooltip(bin,i,bins,validValues.length)}}</title>\n                <rect x=\"0\"\n                    width=\"{{ bin.x1 != bin.x0 ? xScale(bin.x1)-xScale(bin.x0)-1 : 20 }}\"\n                    height='{{ innerHeight - yScale(bin.length) }}'\n                ></rect>\n            </g>\n            {{/each}}\n        </g> -->\n\n        <g class='bars'>\n            {#each bins as bin, i}\n            <g class=\"bar\" transform=\"translate({xScaleBand(bin.x0)},{yScale(bin.length)})\">\n                <title>{tooltip(bin,i,bins,validValues.length)}</title>\n                <rect\n                    width=\"{ bin.x1 != bin.x0 ? xScaleBand.bandwidth() : 20 }\"\n                    height='{ innerHeight - yScale(bin.length) }'\n                ></rect>\n            </g>\n            {/each}\n        </g>\n\n    </g>\n</svg>\n<ul>\n    {#each stats as s}\n    <li>{s.name}: <tt on:mouseleave=\"show(false)\" on:mouseenter=\"show(s)\">{s.label}</tt>\n    </li>\n    {/each}\n    {#if NAs>0}\n    <li>{__('describe / histogram / invalid')}: <tt style=\"color:#c71e1d\">{NAs}</tt> ({pct(NAs/values.length)})</li>\n    {/if}\n</ul>\n<p class=\"learn-more\">{@html __(\"describe / histogram / learn-more\")}</p>\n\n<script>\n    import _range from 'underscore-es/range';\n    import _countBy from 'underscore-es/countBy';\n    import _keys from 'underscore-es/keys';\n    import { toFixed } from '../../shared/utils.js';\n    import {__} from '../../shared/l10n';\n    import { scaleLinear, scaleBand } from 'd3-scale';\n    import { histogram, max, min, extent, mean, median,\n       thresholdSturges } from 'd3-array';\n\n    var xScale_ = scaleLinear();\n    var xScaleBand_ = scaleBand();\n    var yScale_ = scaleLinear();\n\n    const pct = (val) => {\n        if (!val) return '0%';\n        if (val < 0.01) return '<1%';\n        return (val*100).toFixed(0)+'%';\n    };\n\n    export default {\n        data () {\n            return {\n                format: d => d,\n                t: 0,\n                padding: { top: 10, right: 65, bottom: 20, left: 5 },\n                height: 200,\n                width: 500,\n                values: [],\n                highlight: false\n            };\n        },\n\n        helpers: {\n            tooltip(bin, i, bins, len) {\n                const tt = i === 0 ? __(\"describe / histogram / tooltip / first\") :\n                    i === bins.length-1 ? __(\"describe / histogram / tooltip / last\") :\n                    __(\"describe / histogram / tooltip\");\n                return tt.replace('$1', bin.length)\n                    .replace('$2', pct(bin.length / len))\n                    .replace('$3', toFixed(bin.x0))\n                    .replace('$4', toFixed(bin.x1));\n            },\n            pct,\n            formatMobile(tick) {\n                return \"'\" + tick % 100;\n            },\n            __\n        },\n\n        computed: {\n\n            NAs ({ values }) {\n                return values.filter(d => typeof d == 'string' || Number.isNaN(d)).length;\n            },\n\n            stats ({ validValues, format }) {\n                const xmin = min(validValues);\n                const xmax = max(validValues);\n                const xmean = mean(validValues);\n                const xmed = median(validValues);\n                return [\n                    {x:xmin, label: format(xmin), name: 'Min'},\n                    {x:xmax, label: format(xmax), name: 'Max'},\n                    {x:xmean, label: format(xmean), name: __('describe / histogram / mean')},\n                    {x:xmed, label: format(xmed), name: __('describe / histogram / median') }\n                ];\n            },\n\n            validValues ({ values }) {\n                return values.filter(d => typeof d == 'number' && !Number.isNaN(d));\n            },\n\n            ticks ({ xScale, format }) {\n                return xScale.ticks(4).map(x => {\n                    return {x, label:format(x)};\n                });\n            },\n\n            bins ({ niceDomain, validValues }) {\n                // const tickCnt = Math.min(_uniq(validValues).length, 14);\n                const dom = niceDomain;\n                // const classw = (s[1]-s[0]);\n                const bins = histogram()\n                    .domain(dom)\n                    .thresholds(thresholdSturges)(validValues);\n                const bin_widths = _countBy(bins.map(b => b.x1 - b.x0));\n                if (bins.length > 2 && _keys(bin_widths).length > 1) {\n                    // check first and last bin\n                    const binw = bins[1].x1 - bins[1].x0;\n                    const lst = dom[0] + Math.ceil((dom[1]-dom[0])/binw)*binw;\n                    return histogram().domain([dom[0], lst])\n                        .thresholds(_range(dom[0], lst+binw*0.4, binw))(validValues);\n                }\n                return bins;\n            },\n\n            niceDomain ({ validValues }) {\n                return scaleLinear()\n                    .domain(extent(validValues))\n                    .nice().domain();\n            },\n\n            xScaleBand({ bins, innerWidth }) {\n                return xScaleBand_\n                    .domain(bins.map(d => d.x0))\n                    .paddingInner(0.1)\n                    .rangeRound([0, innerWidth])\n                    .align(0);\n            },\n\n            xScale ({ niceDomain, bins, xScaleBand }) {\n                return xScale_\n                    .domain(niceDomain)\n                    .rangeRound([0, xScaleBand.step() * bins.length]);\n            },\n\n            yScale ({ innerHeight, bins }) {\n                return yScale_\n                    .domain([0, max(bins, function(d) { return d.length; })])\n                    .range([innerHeight, 0]);\n            },\n\n            barWidth ({ bins, xScale }) {\n                return xScale(bins[0].x1) - xScale(bins[0].x0) - 1\n            },\n\n            innerWidth ({ width, padding }) {\n                return width - padding.left - padding.right;\n            },\n            innerHeight ({ height, padding }) {\n                return height - padding.bottom - padding.top;\n            }\n\n        },\n\n        oncreate() {\n            this.resize();\n        },\n\n        methods: {\n            show (value) {\n                this.set({highlight: value});\n            },\n            resize: function () {\n                var bcr = this.refs.svg.getBoundingClientRect();\n\n                this.set({\n                    width: bcr.right - bcr.left,\n                    height: bcr.bottom - bcr.top\n                });\n            }\n        }\n    };\n</script>\n\n\n<style>h3 {\n  margin-top: 25px;\n}\n.chart {\n  width: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n}\nsvg {\n  overflow: visible;\n  position: relative;\n  width: 100%;\n  height: 135px;\n}\n.tick {\n  font-family: Roboto, sans-serif;\n  font-size: 0.725em;\n  font-weight: 200;\n}\n.tick line {\n  shape-rendering: crispEdges;\n}\n.axis line {\n  stroke: #888;\n  shape-rendering: crispEdges;\n}\n.tick text {\n  fill: #888;\n  text-anchor: start;\n}\n.x-axis .tick text {\n  text-anchor: middle;\n  dominant-baseline: hanging;\n}\n.bars rect {\n  fill: #cecece;\n  stroke: none;\n  shape-rendering: crispEdges;\n}\ntt {\n  font-size: 13px;\n  font-weight: 400;\n  font-family: Roboto;\n  color: #297EA8;\n}\nul {\n  margin: 0;\n  padding: 0;\n}\nul li {\n  display: inline-block;\n  margin-right: 1em;\n  color: #777;\n  font-size: 13px;\n}\n:global(.learn-more) {\n  margin-top: 15px;\n  font-size: 12px;\n  color: #888;\n}\n</style>\n\n",
    "<div id=\"data-preview\" ref:hot />\n\n<script>\n    import HOT from 'Handsontable';\n    import clone from '../../shared/clone.js';\n    import purifyHtml from '../../shared/purifyHtml.js';\n    import delimited from '../../chart/dataset/delimited.js';\n\n    let app = null;\n\n    export default {\n        methods: {\n            render() {\n                const {hot} = this.get();\n                hot.render();\n            },\n            update() {\n                const {data, transpose, firstRowIsHeader, skipRows, hot} = this.get();\n\n                if (!data) return;\n\n                // get chart\n                const chart = this.store;\n\n                // pass dataset through chart to apply changes and computed columns\n                const ds = chart.dataset(delimited({\n                    csv: data,\n                    transpose,\n                    firstRowIsHeader,\n                    skipRows\n                }).parse()).dataset();\n\n                this.set({columnOrder: ds.columnOrder()});\n\n                // construct HoT data array\n                const hot_data = [[]];\n                ds.eachColumn(c => hot_data[0].push(c.title()));\n\n                ds.eachRow(r => {\n                    const row = [];\n                    ds.eachColumn(col => row.push(col.raw(r)));\n                    hot_data.push(row);\n                });\n\n                // pass data to hot\n                hot.loadData(hot_data);\n\n                const cellRenderer = getCellRenderer(this, ds, HOT, {});\n\n                hot.updateSettings({\n                    cells: (row, col) => {\n                        const {readonly} = this.get();\n                        return {\n                            readOnly: readonly || (ds.hasColumn(col) && ds.column(col).isComputed && row === 0),\n                            renderer: cellRenderer\n                        };\n                    },\n                    manualColumnMove: []\n                });\n\n                this.set({ds});\n                this.set({has_changes: clone(chart.get('metadata.data.changes', [])).length > 0})\n\n                HOT.hooks.once('afterRender', () => this.initCustomEvents());\n                hot.render();\n            },\n            dataChanged (cells) {\n                const {hot} = this.get();\n                let changed = false;\n                cells.forEach(([row, col, old_val, new_val]) => {\n                    if (old_val !== new_val) {\n                        const chart = this.store;\n                        const {transpose} = this.get();\n                        const changes = clone(chart.getMetadata('data.changes', []));\n                        row = hot.toPhysicalRow(row);\n                        col = chart.dataset().columnOrder()[col];\n                        if (transpose) {\n                            // swap row and col\n                            const tmp = row;\n                            row = col;\n                            col = tmp;\n                        }\n                        // store new change\n                        changes.push({\n                            column: col, row, value: new_val, time: (new Date()).getTime()\n                        });\n                        chart.setMetadata('data.changes', changes);\n                        changed = true;\n                    }\n                })\n                if (changed) {\n                    // setTimeout(() => {\n                    //     this.update();\n                    //     chart.save();\n                    // }, 100);\n                }\n            },\n            columnMoved (srcColumns, tgtIndex) {\n                const {hot} = this.get();\n                if (!srcColumns.length) return;\n                const {columnOrder} = this.get();\n                const newOrder = columnOrder.slice(0);\n                const after = columnOrder[tgtIndex];\n                const elements = newOrder.splice(srcColumns[0], srcColumns.length);\n                const insertAt = after === undefined ? newOrder.length : after ? newOrder.indexOf(after) : 0;\n                newOrder.splice(insertAt, 0, ...elements);\n                this.store.setMetadata('data.column-order', newOrder.slice(0));\n                this.set({columnOrder: newOrder});\n                // update selection\n                HOT.hooks.once('afterRender', () => {\n                    setTimeout(() => {\n                        this.fire('resetSort');\n                        hot.selectCell(0, insertAt, hot.countRows()-1,\n                            insertAt+elements.length-1);\n                    }, 10);\n                });\n                this.update();\n            },\n            updateHeight () {\n                const h = document.querySelector('.ht_master.handsontable .wtHolder .wtHider').getBoundingClientRect().height;\n                if (!this.refs.hot) return;\n                this.refs.hot.style.height = Math.min(500, h+10)+'px';\n            },\n            checkRange (r,c,r2,c2) {\n                // check if\n                // 1. only a single column is selected, and\n                // 2. the range starts at the first row, and\n                // 3. the range extends through he last row\n                const {hot} = this.get();\n                const {ds} = this.get();\n                if (c === c2 && r === 0 && r2 === hot.countRows()-1) {\n                    // const chart = this.store.get('dw_chart');\n                    // this.set({activeColumn: chart.dataset().column(c)});\n                    return;\n                }\n                if (c !== c2 && r === 0 && r2 === hot.countRows()-1) {\n                    const sel = [];\n                    for (let i=Math.min(c,c2); i<=Math.max(c,c2); i ++) {\n                        // ugly hack, but necessary\n                        sel.push(+document.querySelector(`#data-preview .htCore tbody tr:first-child td:nth-child(${i+2})`).dataset.column);\n                    }\n                    this.set({multiSelection:  sel.map(i => ds.column(i)), activeColumn:null});\n                    return;\n                }\n                this.set({activeColumn:null, multiSelection:false});\n            },\n            initCustomEvents () {\n                // wait a bit to make sure HoT is rendered\n                setTimeout(() => {\n                    // catch click events on A,B,C,D... header row\n                    if (!this.refs.hot) return;\n                    this.refs.hot.querySelectorAll('.htCore thead th:first-child').forEach(th => {\n                        th.removeEventListener('click', topLeftCornerClick);\n                        th.addEventListener('click', topLeftCornerClick);\n                    });\n                    this.refs.hot.querySelectorAll('.htCore thead th+th').forEach(th => {\n                        th.removeEventListener('click', cellHeaderClick);\n                        th.addEventListener('click', cellHeaderClick);\n                    });\n                }, 500);\n            },\n\n            getColumnFormat(name) {\n                const chart = this.store;\n                const colFormats = chart.getMetadata('data.column-format', {});\n                return colFormats[name] || { type: 'auto', ignore: false };\n            }\n        },\n        computed: {\n            currentResult ({ searchResults, searchIndex }) {\n                if (!searchResults || !searchResults.length) return null;\n                const l = searchResults.length;\n                if (searchIndex < 0 || searchIndex >= l) {\n                    while (searchIndex<0) searchIndex += l;\n                    if (searchIndex > l) searchIndex %= l;\n                }\n                return searchResults[searchIndex];\n            }\n        },\n        oncreate() {\n            app = this;\n            HOT.hooks.once('afterRender', () => this.initCustomEvents());\n\n            window.addEventListener('keyup', (evt) => {\n                const {activeColumn, ds} = this.get();\n                if (!activeColumn) return;\n\n                if (evt.target.tagName.toLowerCase() === \"input\" ||\n                    evt.target.tagName.toLowerCase() === \"textarea\") return;\n\n                if (evt.key === 'ArrowRight' || evt.key === 'ArrowLeft') {\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    const cur_i = ds.indexOf(activeColumn.name());\n                    if (evt.key === 'ArrowRight') {\n                        // select next column\n                        this.set({activeColumn: ds.column((cur_i+1) % ds.numColumns())});\n                    } else {\n                        // select prev column\n                        this.set({activeColumn: ds.column((cur_i-1+ds.numColumns()) % ds.numColumns())});\n                    }\n                }\n\n            });\n\n            const chart = this.store;\n\n            const hot = new HOT(this.refs.hot, {\n                data: [],\n                rowHeaders: (i) => {\n                    const ti = hot.getPlugin('ColumnSorting').translateRow(i);\n                    return ti+1;\n                },\n                colHeaders: true,\n                fixedRowsTop: 1,\n                fixedColumnsLeft: this.get('fixedColumnsLeft'),\n                filters: true,\n                dropdownMenu: true,\n                startRows: 13,\n                startCols: 8,\n                fillHandle: false,\n                stretchH: 'all',\n                height: 500,\n                manualColumnMove: true,\n                selectionMode: 'range',\n                autoColumnSize: {useHeaders: true, syncLimit: 5},\n                // comments: true,\n                // contextMenu: true,\n\n                // sorting\n                columnSorting: true,\n                sortIndicator: true,\n                sortFunction: function(sortOrder, columnMeta) {\n                    if (columnMeta.col > -1) {\n                        var column = chart.dataset().column(columnMeta.col);\n                        var colType = column.type();\n                        var plugin = hot.getPlugin('columnSorting');\n                        return function(a, b) {\n                            var sortFunction;\n                            if (a[0] === 0) return -1;\n                            // replace with values\n                            a[1] = column.val(a[0]-1);\n                            b[1] = column.val(b[0]-1);\n                            if (colType === 'number') {\n                                // sort NaNs at bottom\n                                if (isNaN(a[1])) a[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                                if (isNaN(b[1])) b[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                            }\n                            if (colType === 'date') {\n                                if (typeof a[1] == 'string') a[1] = new Date(110,0,1);\n                                if (typeof b[1] == 'string') b[1] = new Date(110,0,1);\n                            }\n                            switch (colType) {\n                                case 'date':\n                                    sortFunction = plugin.dateSort;\n                                    break;\n                                case 'number':\n                                    sortFunction = plugin.numericSort;\n                                    break;\n                                default:\n                                    sortFunction = plugin.defaultSort;\n                            }\n                            return sortFunction(sortOrder, columnMeta)(a, b);\n                        };\n                    }\n                    return (a,b) => a[0]-b[0];\n                },\n                afterGetColHeader: (col, th) => {\n                    const {activeColumn, ds} = this.get();\n                    if (!ds || !ds.hasColumn(col)) return;\n                    if ((col === 0 || col) && activeColumn && ds.column(col).name() === activeColumn.name()) {\n                        th.classList.add('selected');\n                    }\n\n                    if (col === 0 || col) {\n                        if (this.getColumnFormat(ds.column(col).name()).ignore) {\n                            th.classList.add('ignored');\n                        } else {\n                            th.classList.remove('ignored');\n                        }\n                    }\n                },\n                // search\n                search: 'search'\n            });\n\n            window.HT = hot;\n            this.set({hot});\n\n            HOT.hooks.add('afterSetDataAtCell', (a) => this.dataChanged(a));\n            HOT.hooks.add('afterColumnMove', (a,b) => this.columnMoved(a,b));\n            HOT.hooks.add('afterRender', () => this.updateHeight());\n            HOT.hooks.add('afterSelection', (r,c,r2,c2) => this.checkRange(r,c,r2,c2));\n\n            this.observe('data', () => this.update());\n            this.observe('firstRowIsHeader', (v, vo) => {\n                if (v !== vo && vo !== undefined) this.update()\n            });\n\n            this.observe('search', (query, oldquery) => {\n                if (query !== oldquery) this.set({searchIndex:0});\n                const searchResults = hot.search.query(query);\n                this.set({searchResults});\n                hot.render();\n            });\n\n            this.observe('currentResult', (res) => {\n                // console.log('cur search res', res);\n                if (!res || !hot) return;\n                // this is a weird hack to deal with HoT's problems to scroll\n                // all the way down after hot.scrollViewportTo(hot.countRows()-1, res.col);\n                // the first scrollViewportTo will trigger a render event\n                hot.render(); // to update the hightlight colors\n                hot.scrollViewportTo(res.row, res.col);\n                setTimeout(() => {\n                    // one more time\n                    hot.scrollViewportTo(res.row, res.col);\n                }, 100);\n            });\n\n            this.observe('activeColumn', () => {\n                setTimeout(() => hot.render(), 10);\n            });\n\n            this.observe('fixedColumnsLeft', (v) => {\n                hot.updateSettings({fixedColumnsLeft: v});\n            });\n\n            // if (hot.sortingEnabled) {\n            this.observe('sorting', (sorting) => {\n                hot.sort(chart.dataset().indexOf(sorting.sortBy), sorting.sortDir);\n            });\n            // }\n\n        },\n        data() {\n            return {\n                data: '',\n                readonly: false,\n                skipRows: 0,\n                firstRowIsHeader: true,\n                fixedColumnsLeft: 0,\n                searchIndex: 0,\n                sortBy: '-',\n                transpose: false,\n                activeColumn: null,\n                search: '',\n                searchResults: []\n            };\n        }\n    };\n\n    function getCellRenderer(app, dataset, Handsontable) {\n        const colTypeIcons = {\n            date: 'fa fa-clock-o'\n        };\n        function HtmlCellRender(instance, TD, row, col, prop, value) {\n            var escaped = purifyHtml(Handsontable.helper.stringify(value));\n            TD.innerHTML = escaped; // this is faster than innerHTML. See: https://github.com/warpech/jquery-handsontable/wiki/JavaScript-&-DOM-performance-tips\n        }\n        return function(instance, td, row, col, prop, value, cellProperties) {\n            if (dataset.numColumns() <= col || !dataset.hasColumn(col)) return;\n            const column = dataset.column(col);\n            const {searchResults, currentResult, activeColumn} = app.get();\n            const colFormat = app.getColumnFormat(column.name());\n            row = instance.toPhysicalRow(row);\n            if (row > 0) {\n                var formatter = app.store.columnFormatter(column);\n                value = formatter(column.val(row - 1), true);\n            }\n            if (parseInt(value) < 0) { // if row contains negative number\n                td.classList.add('negative');\n            }\n            td.classList.add(column.type()+'Type');\n            td.dataset.column = col;\n\n            if (column.type() === 'text' && value && value.length > 70) {\n                value = value.substr(0,60)+'â€¦';\n            }\n\n            if (row === 0) {\n                td.classList.add('firstRow');\n                if (colTypeIcons[column.type()]) {\n                    value = '<i class=\"'+colTypeIcons[column.type()]+'\"></i> ' + value;\n                }\n            } else {\n                td.classList.add(row % 2 ? 'oddRow' : 'evenRow');\n            }\n            if (colFormat.ignore) {\n                td.classList.add('ignored');\n            }\n            if (activeColumn && activeColumn.name() === column.name()) {\n                td.classList.add('active');\n            }\n            const row_p = instance.getPlugin('columnSorting').untranslateRow(row);\n            searchResults.forEach(res => {\n                if (res.row === row_p && res.col === col) {\n                    td.classList.add('htSearchResult');\n                }\n            });\n            if (currentResult && currentResult.row === row_p && currentResult.col === col) {\n                td.classList.add('htCurrentSearchResult');\n            }\n            if (row > 0 && !column.type(true).isValid(column.val(row-1))) {\n                td.classList.add('parsingError');\n            }\n            if (cellProperties.readOnly) td.classList.add('readOnly');\n\n            if (app.store.dataCellChanged(col, row)) {\n                td.classList.add('changed');\n            }\n            HtmlCellRender(instance, td, row, col, prop, value, cellProperties);\n            // Reflect.apply(HtmlCellRender, this, arguments);\n        };\n    }\n\n    function topLeftCornerClick(evt) {\n        evt.preventDefault();\n        const {transpose} = app.get();\n        app.set({transpose: !transpose});\n        app.update();\n    }\n\n    function cellHeaderClick(evt) {\n        const th = this;\n        // reset the HoT selection\n        // find out which data column we're in\n        const k = th.parentNode.children.length;\n        let th_i = -1;\n        // (stupid HTMLCollection has no indexOf)\n        for (let i=0; i<k; i++) {\n            if (th.parentNode.children.item(i) === th) {\n                th_i = i;\n                break;\n            }\n        }\n        // find column index\n        const col_i = +app.refs.hot.querySelector(`.htCore tbody tr:first-child td:nth-child(${th_i+1})`).dataset.column;\n        const chart = app.store;\n        const {activeColumn,hot} = app.get();\n        if (chart.dataset().hasColumn(col_i)) {\n            const newActive = chart.dataset().column(+col_i);\n            // set active column (or unset if it's already set)\n            if (activeColumn && activeColumn.name() === newActive.name()) {\n                evt.target.parentNode.classList.remove('selected');\n                app.set({activeColumn:false});\n                hot.deselectCell();\n            } else {\n                evt.target.parentNode.classList.add('selected');\n                app.set({activeColumn: newActive});\n            }\n        }\n    }\n\n</script>\n\n<style>:global(#data-preview) {\n  width: 770px;\n  /*height: 400px;*/\n  overflow: auto;\n}\n:global(#data-preview) tr td,\n:global(#data-preview) tr th {\n  font-family: 'Roboto Mono', fixed;\n  font-size: 12px;\n}\n:global(#data-preview) colgroup col {\n  max-width: 500px!important;\n}\n:global(#data-preview) tr td {\n  padding: 3px 6px;\n}\n:global(#data-preview) tr td.textType {\n  color: #000000;\n}\n:global(#data-preview) tr td.dateType {\n  color: #39A832;\n  text-align: center;\n}\n:global(#data-preview) tr td.numberType {\n  color: #297EA8;\n  text-align: right;\n}\n:global(#data-preview) tr td.parsingError {\n  background: #fee;\n  color: #c00;\n}\n:global(#data-preview) tr td.readOnly.firstRow {\n  background: #EAEAEA;\n  border-right-color: #aaa;\n  color: #777;\n}\n:global(#data-preview) tr td.active {\n  background: #e8f6fa;\n}\n:global(#data-preview) tr td.active.firstRow {\n  background: #d5e3e7;\n}\n:global(#data-preview) tr td.changed {\n  position: relative;\n}\n:global(#data-preview) tr td.changed:after {\n  content: ' ';\n  width: 0;\n  height: 0;\n  border-top: 7px solid orange;\n  border-right: 7px solid transparent;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n:global(#data-preview) tr td.htSearchResult {\n  /*background: #ffd;*/\n  background: #fff8ef;\n  color: #8d6833 !important;\n}\n:global(#data-preview) tr td.htCurrentSearchResult {\n  color: #583707 !important;\n  background: #fcedd9;\n  /*background: #fffe83;*/\n}\n:global(#data-preview) thead th {\n  cursor: pointer;\n  background: #eee;\n  border-right: 1px solid hsl(0, 0%, 70%);\n}\n:global(#data-preview) thead th:first-child .cornerHeader:after {\n  display: block;\n  content: '';\n  width: 12px;\n  height: 12px;\n  background-image: url(/static/css/chart-editor/transpose.png);\n  background-size: contain;\n  position: absolute;\n  top: calc(50% - 6px);\n  left: calc(50% - 6px);\n}\n:global(#data-preview) thead th.selected {\n  background: #18a1cd;\n  color: white;\n  font-weight: bold;\n}\n:global(#data-preview) thead th:hover {\n  background: #ddd;\n}\n:global(#data-preview) thead th.selected:hover {\n  background: #18a1cd;\n}\n:global(#data-preview) thead tr th + th div:after {\n  position: absolute;\n  top: 3px;\n  right: 5px;\n}\n:global(#data-preview) thead th + th.selected div:after {\n  opacity: 1;\n}\n:global(#data-preview) td.ignored,\n:global(#data-preview) th.ignored {\n  color: #aaa !important;\n  text-decoration: line-through;\n  background-color: #f4f4f4;\n  /*&.area { background: #dce5f7; }*/\n}\n:global(#data-preview) td.ignored.firstRow,\n:global(#data-preview) th.ignored.firstRow {\n  background-color: #ddd;\n}\n:global(#data-preview) td.ignored.firstRow.area,\n:global(#data-preview) th.ignored.firstRow.area {\n  background: #d4ddee;\n}\n:global(#data-preview) th.ignored {\n  background-color: #e2e2e2;\n  color: #aaa;\n  text-decoration: line-through;\n}\n:global(#data-preview) tbody tr:first-child td {\n  background: #f3f3f3;\n  font-weight: bold;\n  border-bottom: 1px solid #999;\n}\n:global(#data-preview) .htCommentCell:after {\n  border-left: 8px solid transparent;\n  border-top: 8px solid orange;\n}\n:global(#data-preview) .handsontable td.area-1::before,\n:global(#data-preview) .handsontable td.area-2::before,\n:global(#data-preview) .handsontable td.area-3::before,\n:global(#data-preview) .handsontable td.area-4::before,\n:global(#data-preview) .handsontable td.area-5::before,\n:global(#data-preview) .handsontable td.area-6::before,\n:global(#data-preview) .handsontable td.area-7::before,\n:global(#data-preview) .handsontable td.area::before {\n  background: #18a1cd;\n}\n:global(#data-preview) .handsontable .columnSorting {\n  pointer-events: none;\n}\n:global(#data-preview) .handsontable .columnSorting.ascending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f160';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .columnSorting.descending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f161';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .selected .columnSorting::after {\n  color: white;\n}\n</style>\n",
    "\n<!-- new publish step -->\n<div>\n    {#if publishHed}<h2 class=\"pad-top\">{@html publishHed}</h2>{/if}\n    {#if publishIntro}\n        <p>{@html publishIntro}</p>\n    {:else}\n        {#if published}\n        <p>{@html __('publish / republish-intro') }</p>\n        {:else}\n        <p style=\"margin-bottom: 20px\">{@html __('publish / publish-intro') }</p>\n        {/if}\n    {/if}\n\n    <button disabled=\"{ publishing }\" on:click=\"publish()\" class=\"btn-publish btn btn-primary btn-large {published?'':'btn-first-publish'}\">\n        {#if published}\n        <span class=\"re-publish\"><i class=\"fa fa-fw fa-refresh {publishing ? 'fa-spin' : ''}\"></i> <span class=\"title\">{ __('publish / republish-btn') }</span></span>\n        {:else}\n        <span class=\"publish\"><i class=\"fa fa-fw {publishing ? 'fa-refresh fa-spin' : 'fa-cloud-upload'}\"></i> <span class=\"title\">{ __('publish / publish-btn') }</span></span>\n        {/if}\n    </button>\n\n\n    {#if !published}\n    <div class=\"publish-intro\">\n        <div class=\"arrow\">\n            <i class=\"fa fa-chevron-left\"></i>\n        </div>\n        <div class=\"text\">\n            {@html __('publish / publish-btn-intro') }\n        </div>\n    </div>\n    {/if}\n\n\n    {#if needs_republish && !publishing}\n    <div class=\"btn-aside alert\">\n       {@html __('publish / republish-alert') }\n    </div>\n    {/if}\n    {#if published && !needs_republish && progress == 1 && !publishing}\n    <div class=\"alert alert-success\">\n       {@html __('publish / publish-success') }\n    </div>\n    {/if}\n\n    {#if publish_error}\n    <div class=\"alert alert-error\">\n       {@html publish_error }\n    </div>\n    {/if}\n\n    {#if publishing}\n    <div class=\"alert {progress < 1 ? 'alert-info' : 'alert-success'} publishing\">\n        { __(\"publish / progress / please-wait\") }\n        <div class=\"progress progress-striped active\">\n            <div class=\"bar {progress < 1 ? '' : 'bar-success'}\" ref:bar />\n        </div>\n    </div>\n    {/if}\n\n    <div style=\"margin-top:30px\" class=\"{published?'':'inactive'}\">\n        <h2>{@html __('publish / share-embed') }</h2>\n        <div class=\"block\">\n            <i class=\"icon fa fa-link fa-fw\"></i>\n            <div class=\"ctrls\">\n                <div class=\"h\">\n                    <b>{@html __('publish / share-url') }</b>\n                    <div class=\"embed-options\">\n                        <label class=\"radio\"><input bind:group='shareurl_type' value='default' type=\"radio\" name=\"url-type\"> {@html __('publish / share-url / fullscreen') }</label>\n                        {#each plugin_shareurls as tpl}\n                        <label class=\"radio\"><input bind:group='shareurl_type' value='{tpl.id}' type=\"radio\" name=\"url-type\"> {@html tpl.name}</label>\n                        {/each}\n                    </div>\n                </div>\n                <div class=\"inpt\">\n                    <a target=\"_blank\" class=\"share-url\" href=\"{shareUrl}\">{shareUrl}</a>\n                </div>\n            </div>\n            <Help>\n                <div>{@html __('publish / help / share-url') }</div>\n            </Help>\n        </div>\n\n        <div class=\"block\">\n            <i class=\"icon fa fa-code fa-fw\"></i>\n            <div class=\"ctrls\">\n                <div class=\"h\">\n                    <b>{@html __('publish / embed') }</b>\n                    <div class=\"embed-options\">\n                        {#each embed_templates as tpl}\n                        <label class=\"radio\"><input type=\"radio\" bind:group='embed_type' value='{tpl.id}'> {@html tpl.title }</label>\n                        {/each}\n                    </div>\n                </div>\n                <div class=\"inpt\">\n                    <input ref:embedInput type=\"text\" class=\"input embed-code\" readonly value=\"{embedCode}\" /> <button class=\"btn btn-copy\" on:click=\"copy(embedCode)\" title=\"copy\"><i class=\"fa fa-copy\"></i> { __('publish / copy') }</button>\n                    <div class=\"copy-success {copy_success ? 'show':''}\">\n                        { __('publish / copy-success') }\n                    </div>\n                </div>\n            </div>\n            <Help>\n                <div>\n                    {@html __('publish / embed / help') }\n                    {#each embed_templates.slice(2) as tpl}\n                    <div><b>{tpl.title}:</b> {@html tpl.text}</div>\n                    {/each}\n                </div>\n            </Help>\n\n        </div>\n    </div>\n\n    <!-- BEFORE EXPORT -->\n    <svelte:component this={beforeExport} />\n\n    <!-- EXPORT -->\n    <div class=\"export-and-duplicate\">\n\n        <slot name=\"export_actions_header\">\n            <h2 class=\"pad-top\">{@html exportHed}</h2>\n            {#if exportIntro}<p>{@html exportIntro}</p>{/if}\n        </slot>\n\n        <ul class=\"chart-actions\">\n        {#each sortedChartActions as action}\n\n            {#if action}\n            <li class=\"action action-{action.id} {action.class||''} {action.id == active_action ? 'active':''}\">\n                <a on:click=\"select(action, event)\" role=\"button\" href=\"{action.url ? action.url : '#'+action.id}\">\n                    <i class=\"fa fa-{action.icon}\"></i><span class=\"title\">{@html action.title}</span>\n                </a>\n                {#if action.banner && action.banner.text != \"FALSE\" && action.banner.text != \"-\"}\n                <div class=\"banner\" style=\"{action.banner.style}\">{action.banner.text}</div>\n                {/if}\n            </li>\n            {/if}\n\n        {/each}\n        </ul>\n\n        <svelte:component ref:action this={Action}\n            visible=\"{true}\" show=\"{true}\" />\n\n    </div>\n</div>\n\n\n<style>\n    .btn-publish {\n        border-color: #1d81a2!important;\n        box-shadow: 0px 3px 6px rgba(0,0,0,0.25);\n        line-height: 20px;\n        padding: 15px;\n    }\n\n    .btn-publish + .alert {\n        margin-top: 10px;\n    }\n\n    .btn-first-publish {\n        text-align: center;\n        width: 150px;\n        vertical-align: middle;\n        padding: 15px 0 15px;\n    }\n\n    .btn-publish i.fa {\n        font-size: 20px;\n    }\n    .btn-first-publish i.fa {\n        font-size: 32px;\n        display: block;\n        margin: 5px auto;\n    }\n\n    .btn-first-publish .title {\n        display: block;\n        text-align: center;\n        font-size: 18px;\n        line-height: 22px;\n        padding: 5px 20px 0px 20px;\n    }\n    .publish-intro {\n        display: inline-block;\n        font-size: 18px!important;\n        line-height: 22px;\n    }\n\n    .publish-intro .arrow {\n        vertical-align: middle;\n        display: inline-block;\n        padding: 15px;\n    }\n    .publish-intro .text {\n        vertical-align: middle;\n        display: inline-block;\n        width: 200px;\n    }\n    @media (max-width: 1200px) {\n        .publish-intro {\n            font-size: 15px;\n        }\n        .publish-intro .text {\n            vertical-align: middle;\n            display: inline-block;\n            width: 140px;\n            line-height: 18px;\n            font-size: 15px;\n        }\n    }\n\n\n    div.progress {\n        margin-top: 8px;\n        margin-bottom: 4px;\n    }\n    input[type=radio] {\n        vertical-align: baseline!important;\n    }\n    a.share-url {\n        font-size: 18px;\n    }\n    .btn-aside.alert {\n        margin-left: 0;\n        margin-top: 7px;\n        max-width: 100%;\n    }\n\n    .copy-success {\n        font-size: 11px;\n        color: #9c9;\n        font-style: italic;\n        opacity: 0;\n        pointer-events: none;\n        transition: opacity 5s ease-in;\n        margin-top: -10px;\n        position: absolute;\n    }\n    .copy-success.show {\n        opacity: 1;\n        transition: none;\n    }\n    .embed-options {\n        display: inline-block;\n    }\n</style>\n\n<script>\n    import Help from '../editor/Help.html';\n    import Action from './Action.html';\n\n    import {__} from '../shared/l10n';\n    import {trackEvent} from '../shared/analytics';\n    import {getJSON, postJSON, loadScript, loadStylesheet} from '../shared/utils';\n    import computeEmbedHeights from './compute-embed-heights';\n\n\n    let fakeProgress = 0;\n    let initial_auto_publish = true;\n\n    export default {\n        components: { Help},\n        helpers: { __ },\n        computed: {\n\n            shareUrl ({ shareurl_type, $id, $publicUrl, plugin_shareurls, published }) {\n                if (!published) return 'https://www.datawrapper.de/...';\n                if (shareurl_type == 'default') return $publicUrl;\n                let url = '';\n                plugin_shareurls.forEach(t => {\n                    if (t.id == shareurl_type) url = t.url.replace(/%chart_id%/g, $id);\n                });\n                return url;\n            },\n\n            embedCode ({ embed_type, $metadata, $publicUrl }) {\n                if (!$metadata) return '';\n                if ($metadata.publish && !$metadata.publish['embed-codes'])\n                    return `<iframe src=\"${$publicUrl}\" width=\"100%\" height=\"${$metadata.publish['embed-height']}\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>`;\n                return $metadata.publish['embed-codes']['embed-method-'+embed_type];\n            },\n\n            sortedChartActions({chartActions, $actions}) {\n                return (chartActions.concat($actions))\n                    .filter(a => a.id != 'publish-s3')\n                    .sort((a,b) => a.order - b.order);\n            }\n        },\n        methods: {\n\n            publish () {\n                this.set({\n                    publishing: true,\n                    progress: 0,\n                    publish_error: false\n                });\n\n                const chart = this.store;\n                // generate embed codes\n                chart.setMetadata('publish.embed-heights',\n                    computeEmbedHeights(chart, this.get().embed_templates));\n\n                // save embed heights and wait until it's done before\n                // we start to publish the chart\n                trackEvent('Chart Editor', 'publish');\n\n                chart.store(() => {\n                    // publish chart\n                    postJSON(`/api/charts/${chart.get().id}/publish`, null, (res) => {\n                        if (res.status == 'ok') {\n                            this.publishFinished(res.data);\n                            trackEvent('Chart Editor', 'publish-success');\n                        } else {\n                            trackEvent('Chart Editor', 'publish-error', res.message);\n                            this.set({\n                                publish_error: res.message\n                            });\n                        }\n                    });\n                    fakeProgress = 0;\n                    this.updateStatus();\n                });\n            },\n\n            updateProgressBar (p) {\n                if (this.refs.bar) {\n                    this.refs.bar.style.width = (p*100).toFixed()+'%';\n                }\n            },\n\n            updateStatus () {\n                const chart = this.store;\n                fakeProgress += 0.05;\n                getJSON(`/api/charts/${chart.get().id}/publish/status`, (res) => {\n                    if (res) {\n                        res = (+res / 100) + fakeProgress;\n                        this.set({progress: Math.min(1,res)});\n                    }\n                    if (this.get().publishing) {\n                        setTimeout(() => { this.updateStatus(); },400);\n                    }\n                });\n            },\n\n            publishFinished (chartInfo) {\n                this.set({\n                    progress: 1,\n                    published: true,\n                    needs_republish: false\n                });\n                this.store.set({\n                    lastEditStep: 5\n                });\n                setTimeout(() => this.set({publishing: false}), 500);\n                this.store.set(chartInfo);\n            },\n\n            copy () {\n                const me = this;\n                me.refs.embedInput.select();\n                try {\n                    var successful = document.execCommand('copy');\n                    if (successful) {\n                        trackEvent('Chart Editor', 'embedcode-copy');\n                        me.set({copy_success: true});\n                        setTimeout(() => me.set({copy_success:false}), 300);\n                    }\n                } catch (err) {\n                    // console.log('Oops, unable to copy');\n                }\n            },\n\n            select(action, event) {\n                event.preventDefault();\n                const {active_action} = this.get();\n                if (action.id == active_action) {\n                    // unselect current action\n                    return this.set({ active_action:'', Action });\n                }\n                this.set({active_action: action.id});\n                if (action.mod) {\n                    if (action.mod.App) {\n                        this.set({ Action: action.mod.App });\n                    } else {\n                        // todo: show loading indicator\n                        this.set({Action});\n                        this.refs.action.set({loading: true});\n                        if (action.mod.css) {\n                            loadStylesheet(action.mod.css);\n                        }\n                        loadScript(action.mod.src, () => {\n                            setTimeout(() => {\n                                require([action.mod.id], (mod) => {\n                                    // todo: HIDE loading indicator\n                                    Object.assign(action.mod, mod);\n                                    this.set({Action: action.mod.App});\n                                    if (mod.init) mod.init(this.refs.action);\n                                    if (action.mod.data) this.refs.action.set(action.mod.data);\n                                });\n                            }, 200);\n                        });\n                    }\n                } else if (action.action && this[action.action]) {\n                    this.set({Action});\n                    this[action.action]();\n                }\n            },\n\n            duplicate() {\n                const {id} = this.store.get();\n                trackEvent('Chart Editor', 'duplicate');\n                postJSON(`/api/charts/${id}/copy`, null, (res) => {\n                    if (res.status == \"ok\") {\n                        // redirect to copied chart\n                        window.location.href = `/edit/${res.data.id}/visualize`;\n                    } else {\n                        console.warn(data);\n                    }\n                });\n            }\n        },\n\n        onstate({changed, current}) {\n            const userDataReady = window.dw && window.dw.backend && window.dw.backend.setUserData;\n            if (changed.publishing) {\n                if (current.publishing) this.updateProgressBar(current.progress);\n            }\n            if (changed.progress) {\n                this.updateProgressBar(current.progress);\n            }\n            if (changed.embed_type && userDataReady) {\n                const data = window.dw.backend.__userData;\n                if (!current.embed_type || !data) return;\n                data.embed_type = current.embed_type;\n                window.dw.backend.setUserData(data);\n            }\n            if (changed.shareurl_type && userDataReady) {\n                const data = window.dw.backend.__userData;\n                if (!current.shareurl_type || !data) return;\n                data.shareurl_type = current.shareurl_type;\n                window.dw.backend.setUserData(data);\n            }\n            if (changed.published) {\n                window.document\n                    .querySelector('.dw-create-publish .publish-step')\n                    .classList[current.published ? 'add' : 'remove']('is-published');\n            }\n            if (changed.auto_publish) {\n                if (current.auto_publish && initial_auto_publish) {\n                    this.publish();\n                    initial_auto_publish = false;\n                    window.history.replaceState('','', location.pathname);\n                }\n            }\n        },\n        oncreate() {\n            const {lastEditStep} = this.store.get();\n            this.set({published: lastEditStep > 4});\n        },\n        data() {\n            return {\n                active_action: '',\n                embed_templates: [],\n                plugin_shareurls: [],\n                published: false,\n                publishing: false,\n                needs_republish: false,\n                publish_error: false,\n                auto_publish: false,\n                progress: 0,\n                shareurl_type: 'default',\n                embed_type: 'responsive',\n                copy_success: false,\n                Action,\n                chartActions: [{\n                    id: 'duplicate',\n                    icon: 'code-fork',\n                    title: __('Duplicate'),\n                    order: 500,\n                    action: 'duplicate'\n                }],\n                publishHed: '',\n                publishIntro: '',\n                beforeExport: null,\n                exportHed: __('publish / export-duplicate'),\n                exportIntro: __('publish / export-duplicate / intro')\n            }\n        }\n    };\n</script>\n\n",
    "<div on:mouseenter=\"show()\" on:mouseleave=\"hide()\" class=\"help\">\n    <span>{#if visible}<i class=\"im im-graduation-hat\"></i>{:else}?{/if}</span>\n    {#if visible}\n    <div class=\"content\">\n        <slot />\n    </div>\n    {/if}\n</div>\n\n<style type=\"text/css\">\n    .help {\n        float: right;\n        position: relative;\n        z-index: 8000;\n    }\n\n    .help .content::after {\n        content: '';\n        position: absolute;\n        top: 8px;\n        right: 8px;\n    }\n\n    .help .content {\n        display: block;\n    }\n\n    .help .content {\n        /*display: none;*/\n        position: absolute;\n        top: -8px;\n        right: -8px;\n        padding: 8px 40px 8px 10px;\n        background: #18a1cd;\n        color: #fff;\n        width: 260px;\n        border-radius: 2px;\n        box-shadow: 3px 2px 2px rgba(0, 0, 0, 0.1);\n        z-index: 8000;\n    }\n\n    .help .content img {\n        max-width: none;\n    }\n\n    .help > span {\n        font-family: Roboto;\n        z-index: 100001;\n        font-weight: 400;\n        position: relative;\n        display: block;\n        width: 22px;\n        height: 22px;\n        line-height: 22px;\n        border-radius: 50%;\n        background: transparent;\n        text-align: center;\n        color: #6c6e6f66;\n        font-size: 16px;\n        top: -2px;\n    }\n\n    .help:hover > span {\n        background: #18a1cd;\n        color: #f9f9f9;\n    }\n    .help > span .im {\n        font-size: 16px;\n        color: #fff;\n    }\n</style>\n\n<script>\n\n    export default {\n        data() {\n            return {\n                visible: false\n            }\n        },\n        methods: {\n            show() {\n                const t = setTimeout(() => {\n                    this.set({visible: true});\n                }, 400);\n                this.set({t});\n            },\n            hide() {\n                const {t} = this.get();\n                clearTimeout(t);\n                this.set({visible:false});\n            }\n        }\n    }\n</script>\n",
    "{#if loginForm}\n    <!-- LOGIN -->\n    <h2>{@html __('login / login / headline')}</h2>\n    <p>{@html __('login / login / intro')}</p>\n\n    <div class=\"login-form\">\n        {#if successMsg}\n        <div class=\"alert alert-success\">{@html successMsg}</div>\n        {/if}\n        {#if errorMsg}\n        <div class=\"alert alert-error\">{@html errorMsg}</div>\n        {/if}\n        <form class=\"form-vertical\">\n            <div class=\"control-group {emailError?'error':''}\">\n                <label class=\"control-label\">{__('email')}</label>\n                <div class=\"controls\">\n                    <input  bind:value=\"email\" class=\"input-xlarge span3\" type=\"email\" placeholder=\"name@example.com\" />\n                    <span class=\"help-inline\">{emailError}</span>\n                </div>\n            </div>\n            {#if !resetPassword}\n            <div class=\"control-group {passwordError?'error':''}\">\n                <label class=\"control-label\">{__('password')}</label>\n                <div class=\"controls\">\n                    <input class=\"input-xlarge span3\" type=\"password\" bind:value=\"password\" placeholder=\"\" />\n                    <span class=\"help-inline\">{passwordError}</span>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <div class=\"controls\">\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" bind:checked=\"keeplogin\">&nbsp;&nbsp;{__('Remember login?')}\n                    </label>\n                </div>\n            </div>\n            {/if}\n        </form>\n\n        {#if !resetPassword}\n        <button on:click=\"login(email, password, keeplogin)\" class=\"btn btn-large btn-primary\">\n            <i class=\"fa fa-sign-in fa-fw\"></i> {__('Login')}\n        </button>\n        &nbsp; or &nbsp;\n        <button on:click=\"toSignUp(event, true)\" class=\"btn btn-large\">\n            {@html __('login / signup / headline')}\n        </button>\n        {:else}\n        <button on:click=\"sendNewPassword(email)\" class=\"btn btn-large btn-info\">{__('Send new password')}</button>\n        {/if}\n\n        <div style=\"margin-top: 10px\">\n            {#if resetPassword}\n            <a on:click=\"resetPassword(event,false)\" href=\"#\">{__('Return to login...')}</a>\n            {:else}\n            <a on:click=\"resetPassword(event,true)\" href=\"#\">{__('Can\\'t recall your password?')}</a>\n            {/if}\n        </div>\n    </div>\n\n    {#if alternativeSignIns.length}\n    <div style=\"margin-top:10px\">\n        <hr />\n        <p>Alternatively, you can sign in using these providers:</p>\n        {#each alternativeSignIns as signin}\n        <a class=\"btn\" href=\"{signin.url}\"><i class=\"{signin.icon}\"></i> {signin.label}</a>&nbsp;&nbsp;\n        {/each}\n    </div>\n    {/if}\n\n{:else}\n    <!-- SIGN UP -->\n    <h2>{@html __('login / signup / headline')}</h2>\n    <p>{@html __('login / signup / intro')}</p>\n\n    <form class=\"form-vertical\">\n        <div class=\"control-group {emailError?'error':''}\">\n            <label class=\"control-label\">{__('email')}</label>\n            <div class=\"controls\">\n                <input data-lpignore=\"true\" bind:value=\"email\" class=\"input-xxlarge span3\" type=\"email\" placeholder=\"name@example.com\" />\n                <span class=\"help-inline\">{emailError}</span>\n            </div>\n        </div>\n        <div class=\"control-group {passwordError?'error':''}\">\n            <label class=\"control-label\">{__('password')}</label>\n            <div class=\"controls\">\n                <input data-lpignore=\"true\" class=\"input-xxlarge span3\" type=\"password\" bind:value=\"password\" placeholder=\"\" />\n                <span class=\"help-inline\">{passwordError}</span>\n            </div>\n        </div>\n        <div class=\"control-group {password2Error?'error':''}\">\n            <label class=\"control-label\">{__('repeat password')}</label>\n            <div class=\"controls\">\n                <input data-lpignore=\"true\" class=\"input-xxlarge span3\" type=\"password\" bind:value=\"password2\" placeholder=\"\" />\n                <span class=\"help-inline\">{password2Error}</span>\n            </div>\n        </div>\n\n    </form>\n\n    <a on:click=\"signUp()\" class=\"btn btn-large btn-primary\">\n        <i class=\"fa fa-pencil fa-fw\"></i> {__('Sign Up')}\n    </a>\n    &nbsp; or &nbsp;\n    <a on:click=\"toSignUp(event, false)\" class=\"btn btn-login btn-large\">\n        {__('Login')}\n    </a>\n{/if}\n\n<style>p {\n  font-size: 16px;\n  line-height: 1.5;\n}\ninput {\n  padding: 8px 6px;\n}\n.control-label {\n  text-transform: uppercase;\n  font-size: 13px!important;\n  letter-spacing: 2px;\n  font-weight: 400!important;\n  color: #999;\n}\n</style>\n\n<script>\n    import {__} from '../shared/l10n';\n    import {getJSON, postJSON} from '../shared/utils';\n    import CryptoJS from 'crypto-js';\n\n    export default {\n        helpers: {__},\n        computed: {\n            emailError({remoteEmailError}) {\n                if (remoteEmailError) return remoteEmailError;\n                return '';\n            },\n            passwordError({password, remotePasswordError}) {\n                if (remotePasswordError) return remotePasswordError;\n                if (!password) return '';\n                if (!password || password.length < 6) {\n                    return 'Password must be at least six characters';\n                }\n                return '';\n            },\n            password2Error({passwordError, password, password2}) {\n                if (passwordError) return '';\n                if (password2 != password) {\n                    return 'The two passwords must be identical';\n                }\n                return '';\n            }\n        },\n        oncreate() {\n            // get a list of signin methods\n            getJSON('/api/auth/alternative-signins', (res) => {\n                if (res.status == 'ok') {\n                    this.set({alternativeSignIns: res.data});\n                }\n            });\n        },\n\n        methods: {\n            login(email, password, keeplogin) {\n                const pwhash = this.encryptPassword(password);\n                postJSON('/api/auth/login',\n                    JSON.stringify({email, pwhash, keeplogin}),\n                    (res) => {\n                        if (res.status == 'ok') {\n                            this.store.set({user: res.data});\n                        } else {\n                            console.log('error', res);\n                            // this.set({\n                            //     resetPassword: false,\n                            //     remoteEmailError: res.message\n                            // });\n                        }\n                    }\n                );\n            },\n            signUp() {\n\n            },\n            reset() {\n                this.set({\n                    successMsg: '',\n                    errorMsg: '',\n                    remotePasswordError: '',\n                    remoteEmailError: ''\n                });\n            },\n            sendNewPassword(email) {\n                if (!email) {\n                    return this.set({\n                        errorMsg: 'email must not be empty'\n                    });\n                }\n                this.reset();\n                postJSON('/api/account/reset-password',\n                    JSON.stringify({email}),\n                    (res) => {\n                        if (res.status == 'ok') {\n                            this.set({ resetPassword: false, successMsg: res.data });\n                        } else {\n                            this.set({\n                                resetPassword: false,\n                                remoteEmailError: res.message\n                            });\n                        }\n                    }\n                );\n\n            },\n            toSignUp(event, state) {\n                event.preventDefault();\n                this.set({loginForm: !state});\n            },\n            resetPassword(event, state) {\n                event.preventDefault();\n                this.set({resetPassword: state});\n            },\n            encryptPassword(pwd) {\n                const SALT = window.dw.backend.__auth_salt;\n                return CryptoJS.HmacSHA256(pwd, SALT).toString();\n            }\n        },\n        data() {\n            return {\n                successMsg: '',\n                errorMsg: '',\n                email: '',\n                password: '',\n                password2: '',\n                remoteEmailError: '',\n                remotePasswordError: '',\n                keeplogin: true,\n                loginForm: true,\n                resetPassword: false,\n                alternativeSignIns: []\n            }\n        }\n    }\n</script>\n"
  ],
  "names": [],
  "mappings": "AAgBI,WAAW,cAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,AAClC,CAAC;AC4MU,UAAU,AAAE,CAAC,AAC1B,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,AACjB,CAAC,AACO,UAAU,AAAC,CAAC,CAAC,AAAC,CAAC,AACrB,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,eAAe,cAAC,CAAC,AACf,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,6BAAe,CAAC,OAAO,cAAC,CAAC,AACvB,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACvB,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrB,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CACpB,QAAQ,CAAE,MAAM,CAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,6BAAe,CAAC,qBAAO,MAAM,CAC7B,6BAAe,CAAC,OAAO,OAAO,cAAC,CAAC,AAC9B,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,6BAAe,CAAC,OAAO,OAAO,cAAC,CAAC,AAC9B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,cAAC,CAAC,AAC/B,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,aAAa,CAAE,KAAK,AACtB,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,CAAC,cAAC,CAAC,AACnC,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,IAAI,CAAC,UAAU,AAC5B,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,CAAC,GAAG,cAAC,CAAC,AACtC,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,AACX,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,IAAI,cAAC,CAAC,AACtC,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,KAAK,CACd,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,CAAC,AACrB,CAAC,AACD,6BAAe,CAAC,YAAY,cAAC,CAAC,AAC5B,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACb,CAAC,AACD,SAAS,cAAC,CAAC,AACT,cAAc,CAAE,IAAI,CACpB,MAAM,CAAE,CAAC,CACT,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,EAAE,CACX,WAAW,CAAE,GAAG,AAClB,CAAC,AACO,QAAQ,AAAC,CAAC,EAAE,AAAC,CAAC,AACpB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAClB,CAAC;ACnRD,QAAQ,iBAAiB,cAAC,CAAC,AACvB,MAAM,CAAE,KAAK,AACjB,CAAC;ACPG,MAAM,eAAC,CAAC,AAAC,KAAK,CAAE,GAAG,AAAE,CAAC;ACDtB,MAAM,eAAC,CAAC,AAAC,KAAK,CAAE,GAAG,AAAE,CAAC;ACiDtB,QAAQ,cAAC,CAAC,AACN,MAAM,IAAI,CACV,UAAU,CAAE,IAAI,AACpB,CAAC;ACrDE,sBAAsB,cAAC,CAAC,AAC7B,aAAa,CAAE,IAAI,CAAC,UAAU,AAChC,CAAC,AACD,sBAAsB,uBAAS,CAAC,YAAY,cAAC,CAAC,AAC5C,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,UAAU,CAC1B,UAAU,CAAE,CAAC,UAAU,CACvB,YAAY,CAAE,CAAC,UAAU,AAC3B,CAAC,AACD,sBAAsB,yBAAW,CAAC,KAAK,YAAY,cAAC,CAAC,AACnD,aAAa,CAAE,GAAG,CAAC,UAAU,AAC/B,CAAC;ACcG,WAAW,eAAC,CAAC,AACT,OAAO,CAAE,KAAK,CAAC,QAAQ,CAAE,QAAQ,CAAC,KAAK,CAAE,CAAC,CAAC,GAAG,CAAE,CAAC,CAAC,SAAS,CAAE,IAAI,CAAC,KAAK,CAAE,IAAI,AACjF,CAAC;ACwRE,KAAK,eAAC,CAAC,AACZ,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,IAAI,AACb,CAAC,AACD,YAAY,eAAC,CAAC,AACZ,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,IAAI,yBAAU,CAAC,GAAG,eAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,cAAc,CAAE,QAAQ,AAC1B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,CACnB,YAAY,CAAE,GAAG,AACnB,CAAC,AACD,wBAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,eAAC,CAAC,AAC7B,OAAO,CAAE,GAAG,AACd,CAAC,AACD,wBAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAG,MAAM,AAAC,CAAC,AACnC,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,wBAAS,CAAC,cAAc,CAAG,EAAE,CAAG,CAAC,eAAC,CAAC,AACjC,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,AAC5B,CAAC,AACD,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,CACnB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,0BAAW,CAAC,QAAQ,eAAC,CAAC,AACpB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,WAAW,CAC3B,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,GAAG,AACnB,CAAC,AACD,0BAAW,CAAC,KAAK,eAAC,CAAC,AACjB,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,0BAAW,CAAC,KAAK,aAAa,eAAC,CAAC,AAC9B,KAAK,CAAE,IAAI,CACX,0BAA0B,CAAE,GAAG,CAC/B,uBAAuB,CAAE,GAAG,AAC9B,CAAC,AACD,0BAAW,CAAC,aAAa,eAAC,CAAC,AACzB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,0BAAW,CAAC,UAAU,CAAC,IAAI,eAAC,CAAC,AAC3B,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,0BAAW,CAAC,UAAU,CAAC,mBAAI,YAAY,AAAC,CAAC,AACvC,aAAa,CAAE,CAAC,AAClB,CAAC,AACD,0BAAW,CAAC,UAAU,CAAC,mBAAI,WAAW,AAAC,CAAC,AACtC,0BAA0B,CAAE,IAAI,CAChC,uBAAuB,CAAE,IAAI,CAC7B,aAAa,CAAE,GAAG,AACpB,CAAC,AACO,oCAAoC,AAAE,CAAC,AAC7C,aAAa,CAAE,IAAI,AACrB,CAAC,AACO,yBAAyB,AAAC,CAAC,KAAK,AAAC,CAAC,AACxC,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,UAAU,AACvB,CAAC,AACO,qBAAqB,AAAE,CAAC,AAC9B,gBAAgB,CAAE,KAAK,CACvB,OAAO,CAAE,CAAC,CAAC,GAAG,CACd,WAAW,CAAE,aAAa,CAC1B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC3B,CAAC;ACjYM,KAAK,cAAC,CAAC,AACZ,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,WAAW,cAAC,CAAC,AACX,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC,AACD,yBAAW,CAAC,EAAE,cAAC,CAAC,AACd,WAAW,CAAE,aAAa,CAC1B,OAAO,CAAE,YAAY,CAErB,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CACrB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,GAAG,CAAC,GAAG,CAChB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,yBAAW,CAAC,gBAAE,MAAM,AAAC,CAAC,AACpB,UAAU,CAAE,OAAO,AACrB,CAAC,AACO,WAAW,AAAE,CAAC,AACpB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,GAAG,CAAC,GAAG,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAChD,UAAU,CAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CACtD,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AACO,WAAW,AAAC,CAAC,8BAA8B,AAAC,CAAC,AACnD,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,IAAI,AAClB,CAAC,AACO,WAAW,AAAC,CAAC,2BAA2B,AAAC,CAAC,AAChD,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,IAAI,AAClB,CAAC,AACO,WAAW,AAAC,CAAC,uBAAuB,CACpC,WAAW,AAAC,CAAC,aAAa,CAAC,WAAW,AAAC,CAAC,AAC9C,KAAK,CAAE,OAAO,AAChB,CAAC,AACO,WAAW,AAAC,CAAC,cAAc,AAAC,CAAC,AACnC,KAAK,CAAE,OAAO,CAAC,UAAU,AAC3B,CAAC,AACO,WAAW,AAAC,mBAAmB,AAAC,CAAC,AACvC,YAAY,CAAE,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACrC,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CACvB,kBAAkB,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACzF,eAAe,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACtF,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACnF,CAAC;AC+Ic,uBAAuB,AAAC,CAAC,cAAc,AAAC,CAAC,AACtD,KAAK,CAAE,KAAK,AACd,CAAC,AACO,uBAAuB,AAAC,CAAC,SAAS,AAAC,CAAC,AAC1C,WAAW,CAAE,KAAK,AACpB,CAAC;AC1NM,KAAK,SAAS,eAAC,CAAC,AACrB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,AACT,CAAC,AACD,KAAK,wBAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAC,CAAC,AACnC,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,CAAC,UAAU,CACpB,cAAc,CAAE,IAAI,CACpB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,AACrB,CAAC,AACD,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAG,IAAI,OAAO,eAAC,CAAC,AACjD,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,MAAM,CACd,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,cAAc,CAAE,QAAQ,CACxB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,WAAW,CAAE,KAAK,AACpB,CAAC,AACD,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAG,IAAI,OAAO,eAAC,CAAC,AACzD,UAAU,CAAE,OAAO,CACnB,YAAY,CAAE,OAAO,AACvB,CAAC,AACD,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAG,IAAI,sBAAO,MAAM,AAAC,CAAC,AAC/D,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,CACZ,IAAI,CAAE,MAAM,CACZ,GAAG,CAAE,KAAK,CACV,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,OAAO,CAChB,WAAW,CAAE,wBAAwB,CACrC,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,KAAK,AACpB,CAAC,AACD,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAG,IAAI,OAAO,eAAC,CAAC,AACvD,YAAY,CAAE,OAAO,CACrB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,AAClD,CAAC,AACD,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAG,IAAI,OAAO,eAAC,CAAC,AAC1D,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,IAAI,CAClB,MAAM,CAAE,WAAW,CACnB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,QAAQ,CAAG,IAAI,OAAO,eAAC,CAAC,AAClE,YAAY,CAAE,IAAI,CAClB,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,KAAK,SAAS,wBAAS,CACvB,KAAK,SAAS,MAAM,eAAC,CAAC,AACpB,KAAK,CAAE,IAAI,AACb,CAAC,AACD,KAAK,SAAS,wBAAS,CAAC,oBAAK,CAC7B,KAAK,SAAS,qBAAM,CAAC,KAAK,eAAC,CAAC,AAC1B,OAAO,CAAE,GAAG,AACd,CAAC;AC1CG,KAAK,SAAS,cAAC,CAAC,AACZ,KAAK,CAAE,IAAI,AACf,CAAC;ACsLE,EAAE,eAAC,CAAC,AACT,UAAU,CAAE,IAAI,AAClB,CAAC,AAMD,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,OAAO,CACjB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,AACf,CAAC,AACD,KAAK,eAAC,CAAC,AACL,WAAW,CAAE,MAAM,CAAC,CAAC,UAAU,CAC/B,SAAS,CAAE,OAAO,CAClB,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,oBAAK,CAAC,IAAI,eAAC,CAAC,AACV,eAAe,CAAE,UAAU,AAC7B,CAAC,AACD,oBAAK,CAAC,IAAI,eAAC,CAAC,AACV,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,UAAU,AAC7B,CAAC,AACD,oBAAK,CAAC,IAAI,eAAC,CAAC,AACV,IAAI,CAAE,IAAI,CACV,WAAW,CAAE,KAAK,AACpB,CAAC,AACD,sBAAO,CAAC,KAAK,CAAC,IAAI,eAAC,CAAC,AAClB,WAAW,CAAE,MAAM,CACnB,iBAAiB,CAAE,OAAO,AAC5B,CAAC,AACD,oBAAK,CAAC,IAAI,eAAC,CAAC,AACV,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,UAAU,AAC7B,CAAC,AACD,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,iBAAE,CAAC,EAAE,eAAC,CAAC,AACL,OAAO,CAAE,YAAY,CACrB,YAAY,CAAE,GAAG,CACjB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,AACjB,CAAC,AACO,WAAW,AAAE,CAAC,AACpB,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,AACb,CAAC;AC2Lc,aAAa,AAAE,CAAC,AAC7B,KAAK,CAAE,KAAK,CAEZ,QAAQ,CAAE,IAAI,AAChB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,CACpB,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,AAAC,CAAC,AAC5B,WAAW,CAAE,aAAa,CAAC,CAAC,KAAK,CACjC,SAAS,CAAE,IAAI,AACjB,CAAC,AACO,aAAa,AAAC,CAAC,QAAQ,CAAC,GAAG,AAAC,CAAC,AACnC,SAAS,CAAE,KAAK,UAAU,AAC5B,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,AAAC,CAAC,AAC5B,OAAO,CAAE,GAAG,CAAC,GAAG,AAClB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,AAAC,CAAC,AACrC,KAAK,CAAE,OAAO,AAChB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,AAAC,CAAC,AACrC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,AACpB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,WAAW,AAAC,CAAC,AACvC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,KAAK,AACnB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,aAAa,AAAC,CAAC,AACzC,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,AACb,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,SAAS,AAAC,CAAC,AAC9C,UAAU,CAAE,OAAO,CACnB,kBAAkB,CAAE,IAAI,CACxB,KAAK,CAAE,IAAI,AACb,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,OAAO,AAAC,CAAC,AACnC,UAAU,CAAE,OAAO,AACrB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,OAAO,SAAS,AAAC,CAAC,AAC5C,UAAU,CAAE,OAAO,AACrB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,AAAC,CAAC,AACpC,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,MAAM,AAAC,CAAC,AAC1C,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAC5B,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACnC,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,AACR,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,eAAe,AAAC,CAAC,AAE3C,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,OAAO,CAAC,UAAU,AAC3B,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,sBAAsB,AAAC,CAAC,AAClD,KAAK,CAAE,OAAO,CAAC,UAAU,CACzB,UAAU,CAAE,OAAO,AAErB,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,AAAC,CAAC,AAC/B,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,IAAI,CAChB,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,aAAa,MAAM,AAAC,CAAC,AAC/D,OAAO,CAAE,KAAK,CACd,OAAO,CAAE,EAAE,CACX,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,IAAI,sCAAsC,CAAC,CAC7D,eAAe,CAAE,OAAO,CACxB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CACpB,IAAI,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,AACvB,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,SAAS,AAAC,CAAC,AACxC,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,AACnB,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,MAAM,AAAC,CAAC,AACrC,UAAU,CAAE,IAAI,AAClB,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,SAAS,MAAM,AAAC,CAAC,AAC9C,UAAU,CAAE,OAAO,AACrB,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,EAAE,CAAC,GAAG,MAAM,AAAC,CAAC,AACjD,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,GAAG,AACZ,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,CAAG,EAAE,SAAS,CAAC,GAAG,MAAM,AAAC,CAAC,AACvD,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,QAAQ,CACzB,aAAa,AAAC,CAAC,EAAE,QAAQ,AAAC,CAAC,AACjC,KAAK,CAAE,IAAI,CAAC,UAAU,CACtB,eAAe,CAAE,YAAY,CAC7B,gBAAgB,CAAE,OAAO,AAE3B,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,QAAQ,SAAS,CAClC,aAAa,AAAC,CAAC,EAAE,QAAQ,SAAS,AAAC,CAAC,AAC1C,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,QAAQ,SAAS,KAAK,CACvC,aAAa,AAAC,CAAC,EAAE,QAAQ,SAAS,KAAK,AAAC,CAAC,AAC/C,UAAU,CAAE,OAAO,AACrB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,QAAQ,AAAC,CAAC,AACjC,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,YAAY,AAC/B,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,EAAE,AAAC,CAAC,AAC9C,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACO,aAAa,AAAC,CAAC,cAAc,MAAM,AAAC,CAAC,AAC3C,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAClC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,AAC9B,CAAC,AACO,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,OAAO,QAAQ,CAC9C,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,OAAO,QAAQ,CAC9C,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,OAAO,QAAQ,CAC9C,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,OAAO,QAAQ,CAC9C,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,OAAO,QAAQ,CAC9C,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,OAAO,QAAQ,CAC9C,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,OAAO,QAAQ,CAC9C,aAAa,AAAC,CAAC,aAAa,CAAC,EAAE,KAAK,QAAQ,AAAC,CAAC,AACpD,UAAU,CAAE,OAAO,AACrB,CAAC,AACO,aAAa,AAAC,CAAC,aAAa,CAAC,cAAc,AAAC,CAAC,AACnD,cAAc,CAAE,IAAI,AACtB,CAAC,AACO,aAAa,AAAC,CAAC,aAAa,CAAC,cAAc,UAAU,OAAO,AAAC,CAAC,AACpE,IAAI,CAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAC7C,OAAO,CAAE,OAAO,CAChB,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,AACd,CAAC,AACO,aAAa,AAAC,CAAC,aAAa,CAAC,cAAc,WAAW,OAAO,AAAC,CAAC,AACrE,IAAI,CAAE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAC7C,OAAO,CAAE,OAAO,CAChB,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,AACd,CAAC,AACO,aAAa,AAAC,CAAC,aAAa,CAAC,SAAS,CAAC,cAAc,OAAO,AAAC,CAAC,AACpE,KAAK,CAAE,KAAK,AACd,CAAC;AC/cG,YAAY,cAAC,CAAC,AACV,YAAY,CAAE,OAAO,UAAU,CAC/B,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACxC,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,AACjB,CAAC,AAED,YAAY,CAAG,MAAM,cAAC,CAAC,AACnB,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,kBAAkB,cAAC,CAAC,AAChB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,KAAK,CACZ,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,AACxB,CAAC,AAED,0BAAY,CAAC,CAAC,GAAG,cAAC,CAAC,AACf,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,gCAAkB,CAAC,CAAC,GAAG,cAAC,CAAC,AACrB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,gCAAkB,CAAC,MAAM,cAAC,CAAC,AACvB,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,MAAM,CAClB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,AAC9B,CAAC,AACD,cAAc,cAAC,CAAC,AACZ,OAAO,CAAE,YAAY,CACrB,SAAS,CAAE,IAAI,UAAU,CACzB,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,4BAAc,CAAC,MAAM,cAAC,CAAC,AACnB,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,IAAI,AACjB,CAAC,AACD,4BAAc,CAAC,KAAK,cAAC,CAAC,AAClB,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,KAAK,AAChB,CAAC,AACD,MAAM,AAAC,YAAY,MAAM,CAAC,AAAC,CAAC,AACxB,cAAc,cAAC,CAAC,AACZ,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,4BAAc,CAAC,KAAK,cAAC,CAAC,AAClB,cAAc,CAAE,MAAM,CACtB,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,AACnB,CAAC,AACL,CAAC,AAGD,GAAG,SAAS,cAAC,CAAC,AACV,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,GAAG,AACtB,CAAC,AACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,cAAC,CAAC,AACf,cAAc,CAAE,QAAQ,UAAU,AACtC,CAAC,AACD,CAAC,UAAU,cAAC,CAAC,AACT,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,UAAU,MAAM,cAAC,CAAC,AACd,WAAW,CAAE,CAAC,CACd,UAAU,CAAE,GAAG,CACf,SAAS,CAAE,IAAI,AACnB,CAAC,AAED,aAAa,cAAC,CAAC,AACX,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IAAI,CACpB,UAAU,CAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAC9B,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,QAAQ,AACtB,CAAC,AACD,aAAa,KAAK,cAAC,CAAC,AAChB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,AACpB,CAAC,AACD,cAAc,cAAC,CAAC,AACZ,OAAO,CAAE,YAAY,AACzB,CAAC;AC5OD,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,AACjB,CAAC,AAED,oBAAK,CAAC,uBAAQ,OAAO,AAAC,CAAC,AACnB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,GAAG,AACd,CAAC,AAED,oBAAK,CAAC,QAAQ,eAAC,CAAC,AACZ,OAAO,CAAE,KAAK,AAClB,CAAC,AAED,oBAAK,CAAC,QAAQ,eAAC,CAAC,AAEZ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAC1B,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,KAAK,CACZ,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC1C,OAAO,CAAE,IAAI,AACjB,CAAC,AAMD,oBAAK,CAAG,IAAI,eAAC,CAAC,AACV,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,MAAM,CACf,WAAW,CAAE,GAAG,CAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,WAAW,CACvB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,SAAS,CAChB,SAAS,CAAE,IAAI,CACf,GAAG,CAAE,IAAI,AACb,CAAC,AAED,oBAAK,MAAM,CAAG,IAAI,eAAC,CAAC,AAChB,UAAU,CAAE,OAAO,CACnB,KAAK,CAAE,OAAO,AAClB,CAAC,AACD,oBAAK,CAAG,IAAI,CAAC,GAAG,eAAC,CAAC,AACd,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,AACf,CAAC;ACuCE,CAAC,cAAC,CAAC,AACR,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,GAAG,CAAC,GAAG,AAClB,CAAC,AACD,cAAc,cAAC,CAAC,AACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,IAAI,UAAU,CACzB,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,GAAG,UAAU,CAC1B,KAAK,CAAE,IAAI,AACb,CAAC"
}