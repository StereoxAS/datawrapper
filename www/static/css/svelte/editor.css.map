{
  "version": 3,
  "file": "editor.css",
  "sources": [
    "../../../../src/editor/nav/EditorNav.html",
    "../../../../src/editor/upload/UploadStep.html",
    "../../../../src/editor/upload/TextAreaUpload.html",
    "../../../../src/editor/upload/UploadHelp.html",
    "../../../../src/editor/upload/SelectSheet.html",
    "../../../../src/editor/visualize/VisualizeStep.html",
    "../../../../src/editor/Group.html",
    "../../../../src/editor/visualize/ChartDescription.html",
    "../../../../src/publish/Publish.html",
    "../../../../src/editor/Help.html",
    "../../../../src/signin/SignInForm.html"
  ],
  "sourcesContent": [
    "<:Window on:popstate='popstate(event)'/>\n\n<div class=\"create-nav\">\n    {#each steps as step,i}\n    <EditorNavStep on:select=\"select(step, i)\"\n        index=\"{i+1}\" bind:step bind:steps bind:active />\n    {/each}\n</div>\n\n{#if $user.id != $authorId && $user.isAdmin}\n<div class=\"alert alert-warning\" style=\"text-align:center;margin-top:10px;\">\n This chart belongs to <a target=\"_blank\" href=\"/admin/chart/by/{$authorId}\">User {$authorId}</a>. Great power comes with great responsibility, so be careful with what you're doing!\n</div>\n{/if}\n\n<style type=\"text/css\">\n    .create-nav {\n        display: flex;\n        justify-content: space-between;\n    }\n</style>\n<script>\n    import EditorNavStep from './EditorNavStep.html';\n    import _findWhere from 'underscore-es/findWhere';\n    import {trackPageView} from '../../shared/analytics';\n\n    export default {\n        components: { EditorNavStep },\n        methods: {\n            select(step, index) {\n                this.set({active: step.id});\n                if (index === undefined) {\n                    const {steps} = this.get();\n                    index = steps.indexOf(_findWhere(steps, {id: step.id}));\n                }\n                const {lastEditStep} = this.store.get();\n                window.history.pushState({\n                    id: this.store.get().id,\n                    step: step\n                }, null, step.id);\n                this.store.set({lastEditStep: Math.max(lastEditStep, index+1)})\n                trackPageView();\n            },\n            popstate(event) {\n                if (event.state && event.state.id && event.state.step) {\n                    const {id, step} = event.state;\n                    if (id === this.store.get().id) {\n                        // same chart id\n                        this.set({active: step.id});\n                        trackPageView();\n                    } else {\n                        // it's a different chart, we need to reload\n                        window.location.href = `/edit/${id}/${step.id}`;\n                    }\n                }\n            }\n        },\n        oncreate() {\n            const {active, steps} = this.get();\n            const {lastEditStep, id} = this.store.get();\n            const step = _findWhere(steps, {id:active});\n            this.store.set({lastEditStep: Math.max(lastEditStep, steps.indexOf(step)+1)});\n            this.store.on('navigate', (step) => {\n                this.select({id:step});\n            });\n            // make sure the initial state is stored\n            window.history.replaceState({step,id}, step.title);\n        },\n        data() {\n            return {\n                steps: []\n            };\n        }\n    }\n</script>\n",
    "<div class=\"chart-editor dw-create-upload upload-data\" on:drop=\"onFileDrop(event)\" on:dragover=\"dragStart(event)\" on:dragenter=\"dragStart(event)\" on:dragend=\"resetDrag()\" on:dragleave=\"resetDrag()\">\n    {#if dragover}\n    <div class=\"draginfo\">\n        {@html __('upload / drag-csv-here')}\n    </div>\n    {/if}\n    <div class=\"row\" style=\"{dragover?'opacity: 0.5;filter:blur(6px);background:white;pointer-events:none':''}\">\n        <div class=\"span5\">\n            <div class=\"sidebar\">\n                <h3>{@html __('upload / title')}</h3>\n\n                <ul class=\"import-methods\">\n                    {#each buttons as btn}\n                    <li on:click=\"btnAction(btn)\" class=\"action {active==btn?'active':''}\">\n                        <label>\n                            {#if btn.isFileUpload}\n                            <input accept=\".csv, .tsv, .txt, .xlsx, .xls, .ods, .dbf\" on:change=\"btnUpload(btn, event)\" class=\"file-upload\" type=\"file\" />\n                            {/if}\n                            <i class=\"{btn.icon}\"></i>\n                            <span>{btn.title}</span>\n                        </label>\n                    </li>\n                    {/each}\n                </ul>\n\n                {#if error}\n                <div class=\"alert alert-error\">\n                    <div class=\"action close\" on:click=\"set({error:false})\">âœ•</div>\n                    {@html error}\n                </div>\n                {/if}\n\n                <h4>{active.longTitle || active.title}</h4>\n\n                <svelte:component this={Sidebar}\n                    bind:chartData\n                    bind:readonly\n                    bind:sheets\n                    bind:datasets />\n\n            </div>\n        </div>\n        <div class=\"span7\">\n\n            <svelte:component this={MainPanel}\n                bind:chartData\n                bind:readonly />\n\n            <div class=\"buttons pull-right\">\n                <a href=\"describe\" class=\"submit btn btn-primary\" id=\"describe-proceed\"> {__(\"Proceed\")} <i class=\"icon-chevron-right icon-white\"></i></a>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    /* global dw */\n    import TextAreaUpload from './TextAreaUpload.html';\n    import UploadHelp from './UploadHelp.html';\n    import SelectSheet from './SelectSheet.html';\n    import readFile from '../../shared/readFile';\n    import readSpreadsheet from '../../shared/readSpreadsheet';\n    import {putJSON} from '../../shared/utils';\n    import {__} from '../../shared/l10n';\n\n    let app;\n\n    const coreUploads = [{\n        id: 'copy',\n        title: __('upload / copy-paste'),\n        longTitle: __('upload / copy-paste / long'),\n        icon: 'fa fa-clipboard',\n        mainPanel: TextAreaUpload,\n        sidebar: UploadHelp,\n        action() {}\n    },{\n        id: 'upload',\n        title: __('upload / upload-csv'),\n        longTitle: __('upload / upload-csv / long'),\n        icon: 'fa-file-excel-o fa',\n        mainPanel: TextAreaUpload,\n        sidebar: UploadHelp,\n        isFileUpload: true,\n        onFileUpload(event) {\n            const file = event.target.files[0];\n            if (file.type.substr(0,5) === 'text/' || file.name.substr(file.name.length - 4) === \".csv\") {\n                app.set({Sidebar: UploadHelp});\n                readFile(file, (err, result) => {\n                    putJSON(`/api/charts/${dw.backend.currentChart.get('id')}/data`, result, () => {\n                        window.location.href = 'describe';\n                    });\n                });\n            } else if (file.type.substr(0,12) === 'application/') {\n                app.set({Sidebar: SelectSheet, sheets:[]}); // reset\n                readSpreadsheet(file, (err, sheets) => {\n                    if (err) return app.set({error: err});\n                    app.set({sheets});\n                });\n            } else {\n                // console.log(file.type);\n                // console.log(file);\n                app.set({error: __('upload / csv-required')});\n            }\n        },\n        action() {}\n    }];\n\n    export default {\n        oncreate() {\n            app = this;\n            const chart = this.store;\n            const method = chart.getMetadata('data.upload-method', 'copy');\n            this.set({defaultMethod: method});\n            coreUploads.forEach(u => {\n                if (u.id === method) {\n                    this.set({active:u});\n                }\n            });\n        },\n        data() {\n            return {\n                dragover: false,\n                MainPanel: TextAreaUpload,\n                Sidebar: UploadHelp,\n                active: coreUploads[0],\n                buttons: coreUploads,\n                sheets: [],\n                chart: {\n                    id: ''\n                },\n                readonly: false,\n                chartData: '',\n                transpose: false,\n                firstRowIsHeader: true,\n                skipRows: 0\n            }\n        },\n        helpers: { __ },\n        methods: {\n            addButton (btn) {\n                coreUploads.push(btn);\n                this.set({buttons:coreUploads});\n                const {defaultMethod} = this.get();\n                if (btn.id === defaultMethod) {\n                    this.btnAction(btn);\n                }\n            },\n            btnAction (btn) {\n                const chart = this.store;\n                this.set({active:btn});\n                if (btn.id === 'copy') {\n                    // turn off externalData, if still set\n                    if (chart.get('externalData')) {\n                        chart.set({ externalData: '' });\n                    }\n                }\n                let activeKey = btn.id;\n                if (btn.id === 'upload') {\n                    activeKey = 'copy';\n                    setTimeout(() => {\n                    // reset after 1sec\n                        // this.set({active:coreUploads[0]});\n                    }, 1000);\n                }\n                chart.setMetadata('data.upload-method', activeKey);\n                if (btn.action) btn.action();\n                if (btn.mainPanel) this.set({MainPanel:btn.mainPanel});\n                if (btn.sidebar) this.set({Sidebar:btn.sidebar});\n            },\n            btnUpload (btn, event) {\n                if (btn.onFileUpload) btn.onFileUpload(event);\n            },\n            dragStart (event) {\n                const {active} = this.get();\n                if (active.id === 'copy') {\n                    event.preventDefault();\n                    this.set({dragover:true});\n                }\n            },\n            resetDrag () {\n                this.set({dragover:false});\n            },\n            onFileDrop (event) {\n                const {active} = this.get();\n                if (active.id !== 'copy') return;\n                // Prevent default behavior (Prevent file from being opened)\n                this.resetDrag();\n                event.preventDefault();\n                const files = [];\n                if (event.dataTransfer.items) {\n                    // Use DataTransferItemList interface to access the file(s)\n                    for (let i=0; i<event.dataTransfer.items.length; i++) {\n                        // If dropped items aren't files, reject them\n                        if (event.dataTransfer.items[i].kind === 'file') {\n                            files.push(event.dataTransfer.items[i].getAsFile());\n                        }\n                    }\n                    event.dataTransfer.items.clear();\n                } else {\n                    // Use DataTransfer interface to access the file(s)\n                    for (let i=0; i<event.dataTransfer.files.length; i++) {\n                        files.push(event.dataTransfer.files[i]);\n                    }\n                    event.dataTransfer.items.clear();\n                }\n                const chart = this.store;\n                for (let i=0; i<files.length; i++) {\n                    if (files[i].type.substr(0,5) === 'text/') {\n                        return readFile(files[i], (err, result) => {\n                            chart.set({_rawData: result});\n                            chart.storeData(() => {\n                                setTimeout(() => {\n                                    chart.fire('navigate', 'describe');\n                                }, 500);\n                            })\n                        });\n                    }\n                }\n            }\n        }\n    };\n</script>\n\n<style>:global(.not-happy) {\n  margin-top: 15px;\n  font-size: 12px;\n}\n:global(.not-happy) a {\n  font-weight: bold;\n}\n.import-methods {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n.import-methods .action {\n  color: #1d81a2;\n  text-align: center;\n  min-height: 50px;\n  width: calc(25% - 20px);\n  margin: 0 10px 10px 0;\n  padding: 15px 0 10px;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  vertical-align: top;\n  cursor: pointer;\n}\n.import-methods .action:hover,\n.import-methods .action.active {\n  background: #fff;\n  border-radius: 4px;\n}\n.import-methods .action.active {\n  color: #222;\n  cursor: default;\n}\n.import-methods .action > label {\n  margin-top: -10px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  margin-bottom: -10px;\n}\n.import-methods .action > label > i {\n  display: block;\n  margin: 0 auto;\n  font-size: 24px !important;\n}\n.import-methods .action > label > i.fa {\n  position: relative;\n  top: -2px;\n}\n.import-methods .action > label > span {\n  font-size: 12px;\n  line-height: 15px;\n  display: block;\n  padding: 4px 10px 0;\n}\n.import-methods .file-upload {\n  opacity: 0;\n  position: absolute;\n  z-index: -1;\n}\n.draginfo {\n  pointer-events: none;\n  height: 0;\n  position: relative;\n  top: 120px;\n  font-size: 45px;\n  width: 100%;\n  text-align: center;\n  z-index: 10;\n  font-weight: 100;\n}\n:global(.sidebar) h4 {\n  font-size: 17px;\n  font-weight: 400;\n}\n</style>\n",
    "<form class=\"upload-form\">\n\n    <div class=\"control-group\">\n        <textarea bind:value=\"$_rawData\" readonly=\"{readonly}\" id=\"upload-data-text\" style=\"resize:none\" placeholder=\"{placeholder}\"></textarea>\n    </div>\n\n</form>\n\n<script>\n    import {__} from '../../shared/l10n';\n\n    export default {\n        data() {\n            return {\n                placeholder: __(\"upload / paste here\"),\n            }\n        },\n        helpers: { __ }\n    }\n</script>\n\n<style>\ntextarea#upload-data-text {\n    height: 260px;\n}\n</style>\n",
    "<p>{ __(\"upload / quick help\") }</p>\n\n<div class=\"demo-datasets\">\n    <p>{ __(\"upload / try a dataset\") }</p>\n    <select disabled=\"{readonly}\" id=\"demo-datasets\" bind:value=\"selectedDataset\">\n        <option value=\"--\">{ __(\"upload / sample dataset\") }</option>\n        {#each datasetsArray as group}\n        <optgroup label=\"{group.type}\">\n            {#each group.datasets as dataset}\n            <option value=\"{dataset}\" class=\"demo-dataset\">{dataset.title}</option>\n        {/each}\n        </optgroup>\n        {/each}\n    </select>\n</div>\n\n<style>\n    select { width: 70%; }\n</style>\n\n<script>\n    import {__} from '../../shared/l10n';\n\n    /* globals dw */\n    export default {\n        data() {\n            return {\n                selectedDataset: '--'\n            };\n        },\n        helpers: { __ },\n        onupdate({changed, current}) {\n            if (changed.selectedDataset && current.selectedDataset !== '--') {\n                const sel = current.selectedDataset;\n                this.set({chartData: sel.data});\n                if (sel.presets) {\n                    Object.keys(sel.presets).forEach(k => {\n                        dw.backend.currentChart.set(k, sel.presets[k]);\n                    });\n                }\n            }\n        },\n        computed: {\n            datasetsArray({ datasets }) {\n                return Object.keys(datasets).map(k => datasets[k]);\n            }\n        },\n    }\n</script>\n",
    "<div>\n    {#if !sheets.length}\n    <div class=\"alert alert-info\">{@html __('upload / parsing-xls') }</div>\n    {:elseif sheets.length>1}\n    <p>{ __(\"upload / select sheet\") }</p>\n    <select bind:value=\"selected\" disabled=\"{!sheets.length}\">\n        {#each sheets as sheet}\n            <option value=\"{sheet}\">{sheet.name}</option>\n        {/each}\n    </select>\n    {:else}\n    <p>{@html __('upload / xls / uploading data')}</p>\n    {/if}\n</div>\n\n<style>\n    select { width: 70%; }\n</style>\n\n<script>\n    import {__} from '../../shared/l10n';\n    import {putJSON} from '../../shared/utils';\n\n    /* globals dw */\n    export default {\n        data() {\n            return {\n                selected: false,\n                sheets: []\n            }\n        },\n        helpers: { __ },\n        onupdate({changed, current}) {\n            if (changed.sheets && current.sheets.length > 1) {\n                setTimeout(() => {\n                    this.set({selected:current.sheets[0]});\n                }, 300);\n            } else if (changed.sheets && current.sheets.length === 1) {\n                putJSON(`/api/charts/${dw.backend.currentChart.get('id')}/data`, current.sheets[0].csv, () => {\n                    window.location.href = 'describe';\n                });\n            }\n            if (changed.selected) {\n                this.set({chartData: current.selected.csv});\n            }\n        }\n    }\n</script>\n",
    "<div class=\"dw-create-visualize chart-editor chart-editor-web\">\n    <div class=\"row\">\n        <div class=\"span4 visconfig\" style=\"min-height: 516px;\">\n            <ul class=\"nav nav-tabs visualize-nav-tabs\" data-target=\"tab-container\">\n                <li class=\"{active==='vis'?'active':''}\"><a on:click=\"tabNav(event, 'vis')\" href=\"#vis\">{@html __('Chart type')}</a></li>\n                <li class=\"{active==='refine'?'active':''}\"><a on:click=\"tabNav(event, 'refine')\" href=\"#refine\">{@html __('Refine')}</a></li>\n                <li class=\"{active==='annotate'?'active':''}\"><a on:click=\"tabNav(event, 'annotate')\" href=\"#annotate\" >{@html __('Annotate')}</a></li>\n                <li class=\"{active==='design'?'active':''}\"><a on:click=\"tabNav(event, 'design')\" href=\"#design\" >{@html __('Design')}</a></li>\n            </ul>\n\n            <div class=\"tab-container\">\n                <div class=\"section {active}\">\n                    {#if active === 'vis'}\n                        <VisSelector />\n                        <p>\n                            <b>{__(\"Hint\")}:</b> {@html __(\"visualize / transpose-hint\").replace('[LINK]','<a href=\"#\" id=\"btn-transpose\"><img style=\"height:14px\" src=\"/static/css/chart-editor/transpose.png\" />').replace('[/LINK]', '</a>')}\n                        </p>\n                    {:elseif active == 'refine'}\n                        REFINE\n                    {:elseif active == 'annotate'}\n                        <div class=\"story\">\n                            <Group label=\"{__('Annotate your chart')}\">\n                                <ChartDescription />\n                            </Group>\n                        </div>\n                    {:elseif active == 'design'}\n                        DESIGN\n                    {/if}\n                </div>\n            </div>\n\n\n        </div>\n\n        <div class=\"span8\">\n            PREVIEW\n        </div>\n\n    </div>\n</div>\n\n<script>\n    import {__} from '../../shared/l10n';\n    import Group from '../Group.html';\n    import VisSelector from './VisSelector.html';\n    import ChartDescription from './ChartDescription.html';\n\n    export default {\n        helpers: { __ },\n        components: {VisSelector, ChartDescription, Group},\n        methods: {\n            tabNav(event, id) {\n                event.preventDefault();\n                this.set({active:id});\n            }\n        },\n        data() {\n            return {\n                active: 'vis'\n            }\n        }\n    }\n</script>\n\n<style>\n    .section {\n        clear:both;\n        margin-top: 20px;\n    }\n</style>\n",
    "<div class=\"vis-option-type-group {open?'group-open':''} {notoggle?'notoggle':''}\">\n    <label class=\"group-title\" on:click=\"toggle()\">\n        {#if !notoggle}\n        <i class=\"fa fa-chevron-up expand-group pull-right\"></i>\n        <i class=\"fa fa-chevron-down collapse-group pull-right\"></i>\n        {/if}\n        {@html label }</label>\n\n    {#if open}\n    <div class=\"option-group-content vis-option-type-chart-description\">\n        <slot></slot>\n    </div>\n    {/if}\n</div>\n\n<style>.vis-option-type-group {\n  margin-bottom: 30px !important;\n}\n.vis-option-type-group.notoggle .group-title {\n  font-size: 18px;\n  font-weight: 400!important;\n  border-top: 0!important;\n  padding-left: 0!important;\n}\n.vis-option-type-group.group-open label.group-title {\n  margin-bottom: 5px !important;\n}\n</style>\n\n<script>\n    export default {\n        methods: {\n            toggle() {\n                if (this.get().notoggle) return;\n                const {open, id} = this.get();\n                if (id) {\n                    const visGroups = JSON.parse(window.localStorage.getItem('dw-vis-groups')) || {};\n                    if (!visGroups['locator-map']) visGroups['locator-map'] = {};\n                    visGroups['locator-map'][id] = visGroups['locator-map'][id] == 'open' ? 'closed' : 'open';\n                    window.localStorage.setItem('dw-vis-groups', JSON.stringify(visGroups));\n                }\n                this.set({open:!open});\n            }\n        },\n        oncreate() {\n            const {id, notoggle} = this.get() || {};\n            if (notoggle) return;\n            if (id) {\n                const visGroups = JSON.parse(window.localStorage.getItem('dw-vis-groups')) || {};\n                if (visGroups['locator-map'] && visGroups['locator-map'][id]) {\n                    this.set({open: visGroups['locator-map'][id] != 'closed'});\n                }\n            }\n        },\n        data() {\n            return {\n                notoggle: false,\n                id: false,\n                open: true\n            };\n        }\n    }\n</script>\n",
    "<div class=\"story-title control-group\">\n    <div class=\"pull-left\" style=\"position: relative;\">\n        <label class=\"hide-title\"><input type=\"checkbox\"> hide</label>\n        <label class=\"control-label\" for=\"text-title\">{__('Title')}</label>\n        <input bind:value=\"$title\" class=\"input-xlarge span4\" autocomplete=\"off\" type=\"text\">\n\n        <label class=\"control-label\" for=\"text-intro\">{__('Description')}</label>\n        <textarea bind:value=\"$metadata.describe.intro\" id=\"text-intro\" class=\"input-xlarge span4\"></textarea>\n\n        <label class=\"control-label\" for=\"text-notes\">{__('Notes')}</label>\n        <input bind:value=\"$metadata.annotate.notes\" class=\"input-xlarge span4\" type=\"text\">\n    </div>\n\n    <div class=\"row\">\n        <div class=\"span2\">\n            <label class=\"control-label\">{__('Source name')}</label>\n            <input bind:value=\"$metadata.describe['source-name']\" class=\"span2\" placeholder=\"{__('name of the organisation')}\" type=\"text\">\n        </div>\n        <div class=\"span2\">\n            <label class=\"control-label\">{__('Source URL')}</label>\n            <input bind:value=\"$metadata.describe['source-url']\" class=\"span2\" placeholder=\"{__('URL of the dataset')}\" type=\"text\">\n        </div>\n    </div>\n\n    <div class=\"chart-byline\">\n        <label class=\"control-label\">{__('visualize / annotate / byline')}</label>\n        <input bind:value=\"$metadata.describe.byline\" class=\"input-xlarge span4\" placeholder=\"{__('visualize / annotate / byline / placeholder')}\" type=\"text\">\n    </div>\n</div>\n\n<script>\n    import {__} from '../../shared/l10n';\n\n    export default {\n        helpers: { __ },\n    }\n\n</script>\n\n<style type=\"text/css\">\n    .hide-title {\n        display: block;position: absolute;right: 0;top: 0;font-size: 12px;color: #777;\n    }\n</style>\n",
    "\n<!-- new publish step -->\n<div>\n    {#if publishHed}<h2 class=\"pad-top\">{@html publishHed}</h2>{/if}\n    {#if publishIntro}\n        <p>{@html publishIntro}</p>\n    {:else}\n        {#if published}\n        <p>{@html __('publish / republish-intro') }</p>\n        {:else}\n        <p style=\"margin-bottom: 20px\">{@html __('publish / publish-intro') }</p>\n        {/if}\n    {/if}\n\n    <button disabled=\"{ publishing }\" on:click=\"publish()\" class=\"btn-publish btn btn-primary btn-large {published?'':'btn-first-publish'}\">\n        {#if published}\n        <span class=\"re-publish\"><i class=\"fa fa-fw fa-refresh {publishing ? 'fa-spin' : ''}\"></i> <span class=\"title\">{ __('publish / republish-btn') }</span></span>\n        {:else}\n        <span class=\"publish\"><i class=\"fa fa-fw {publishing ? 'fa-refresh fa-spin' : 'fa-cloud-upload'}\"></i> <span class=\"title\">{ __('publish / publish-btn') }</span></span>\n        {/if}\n    </button>\n\n\n    {#if !published}\n    <div class=\"publish-intro\">\n        <div class=\"arrow\">\n            <i class=\"fa fa-chevron-left\"></i>\n        </div>\n        <div class=\"text\">\n            {@html __('publish / publish-btn-intro') }\n        </div>\n    </div>\n    {/if}\n\n\n    {#if needs_republish && !publishing}\n    <div class=\"btn-aside alert\">\n       {@html __('publish / republish-alert') }\n    </div>\n    {/if}\n    {#if published && !needs_republish && progress == 1 && !publishing}\n    <div class=\"alert alert-success\">\n       {@html __('publish / publish-success') }\n    </div>\n    {/if}\n\n    {#if publish_error}\n    <div class=\"alert alert-error\">\n       {@html publish_error }\n    </div>\n    {/if}\n\n    {#if publishing}\n    <div class=\"alert {progress < 1 ? 'alert-info' : 'alert-success'} publishing\">\n        { __(\"publish / progress / please-wait\") }\n        <div class=\"progress progress-striped active\">\n            <div class=\"bar {progress < 1 ? '' : 'bar-success'}\" ref:bar />\n        </div>\n    </div>\n    {/if}\n\n    <div style=\"margin-top:30px\" class=\"{published?'':'inactive'}\">\n        <h2>{@html __('publish / share-embed') }</h2>\n        <div class=\"block\">\n            <i class=\"icon fa fa-link fa-fw\"></i>\n            <div class=\"ctrls\">\n                <div class=\"h\">\n                    <b>{@html __('publish / share-url') }</b>\n                    <div class=\"embed-options\">\n                        <label class=\"radio\"><input bind:group='shareurl_type' value='default' type=\"radio\" name=\"url-type\"> {@html __('publish / share-url / fullscreen') }</label>\n                        {#each plugin_shareurls as tpl}\n                        <label class=\"radio\"><input bind:group='shareurl_type' value='{tpl.id}' type=\"radio\" name=\"url-type\"> {@html tpl.name}</label>\n                        {/each}\n                    </div>\n                </div>\n                <div class=\"inpt\">\n                    <a target=\"_blank\" class=\"share-url\" href=\"{shareUrl}\">{shareUrl}</a>\n                </div>\n            </div>\n            <Help>\n                <div>{@html __('publish / help / share-url') }</div>\n            </Help>\n        </div>\n\n        <div class=\"block\">\n            <i class=\"icon fa fa-code fa-fw\"></i>\n            <div class=\"ctrls\">\n                <div class=\"h\">\n                    <b>{@html __('publish / embed') }</b>\n                    <div class=\"embed-options\">\n                        {#each embed_templates as tpl}\n                        <label class=\"radio\"><input type=\"radio\" bind:group='embed_type' value='{tpl.id}'> {@html tpl.title }</label>\n                        {/each}\n                    </div>\n                </div>\n                <div class=\"inpt\">\n                    <input ref:embedInput type=\"text\" class=\"input embed-code\" readonly value=\"{embedCode}\" /> <button class=\"btn btn-copy\" on:click=\"copy(embedCode)\" title=\"copy\"><i class=\"fa fa-copy\"></i> { __('publish / copy') }</button>\n                    <div class=\"copy-success {copy_success ? 'show':''}\">\n                        { __('publish / copy-success') }\n                    </div>\n                </div>\n            </div>\n            <Help>\n                <div>\n                    {@html __('publish / embed / help') }\n                    {#each embed_templates.slice(2) as tpl}\n                    <div><b>{tpl.title}:</b> {@html tpl.text}</div>\n                    {/each}\n                </div>\n            </Help>\n\n        </div>\n    </div>\n\n    <!-- BEFORE EXPORT -->\n    <svelte:component this={beforeExport} />\n\n    <!-- EXPORT -->\n    <div class=\"export-and-duplicate\">\n\n        <slot name=\"export_actions_header\">\n            <h2 class=\"pad-top\">{@html exportHed}</h2>\n            {#if exportIntro}<p>{@html exportIntro}</p>{/if}\n        </slot>\n\n        <ul class=\"chart-actions\">\n        {#each sortedChartActions as action}\n\n            {#if action}\n            <li class=\"action action-{action.id} {action.class||''} {action.id == active_action ? 'active':''}\">\n                <a on:click=\"select(action, event)\" role=\"button\" href=\"{action.url ? action.url : '#'+action.id}\">\n                    <i class=\"fa fa-{action.icon}\"></i><span class=\"title\">{@html action.title}</span>\n                </a>\n                {#if action.banner && action.banner.text != \"FALSE\" && action.banner.text != \"-\"}\n                <div class=\"banner\" style=\"{action.banner.style}\">{action.banner.text}</div>\n                {/if}\n            </li>\n            {/if}\n\n        {/each}\n        </ul>\n\n        <svelte:component ref:action this={Action}\n            visible=\"{true}\" show=\"{true}\" />\n\n    </div>\n</div>\n\n\n<style>\n    .btn-publish {\n        border-color: #1d81a2!important;\n        box-shadow: 0px 3px 6px rgba(0,0,0,0.25);\n        line-height: 20px;\n        padding: 15px;\n    }\n\n    .btn-publish + .alert {\n        margin-top: 10px;\n    }\n\n    .btn-first-publish {\n        text-align: center;\n        width: 150px;\n        vertical-align: middle;\n        padding: 15px 0 15px;\n    }\n\n    .btn-publish i.fa {\n        font-size: 20px;\n    }\n    .btn-first-publish i.fa {\n        font-size: 32px;\n        display: block;\n        margin: 5px auto;\n    }\n\n    .btn-first-publish .title {\n        display: block;\n        text-align: center;\n        font-size: 18px;\n        line-height: 22px;\n        padding: 5px 20px 0px 20px;\n    }\n    .publish-intro {\n        display: inline-block;\n        font-size: 18px!important;\n        line-height: 22px;\n    }\n\n    .publish-intro .arrow {\n        vertical-align: middle;\n        display: inline-block;\n        padding: 15px;\n    }\n    .publish-intro .text {\n        vertical-align: middle;\n        display: inline-block;\n        width: 200px;\n    }\n    @media (max-width: 1200px) {\n        .publish-intro {\n            font-size: 15px;\n        }\n        .publish-intro .text {\n            vertical-align: middle;\n            display: inline-block;\n            width: 140px;\n            line-height: 18px;\n            font-size: 15px;\n        }\n    }\n\n\n    div.progress {\n        margin-top: 8px;\n        margin-bottom: 4px;\n    }\n    input[type=radio] {\n        vertical-align: baseline!important;\n    }\n    a.share-url {\n        font-size: 18px;\n    }\n    .btn-aside.alert {\n        margin-left: 0;\n        margin-top: 7px;\n        max-width: 100%;\n    }\n\n    .copy-success {\n        font-size: 11px;\n        color: #9c9;\n        font-style: italic;\n        opacity: 0;\n        pointer-events: none;\n        transition: opacity 5s ease-in;\n        margin-top: -10px;\n        position: absolute;\n    }\n    .copy-success.show {\n        opacity: 1;\n        transition: none;\n    }\n    .embed-options {\n        display: inline-block;\n    }\n</style>\n\n<script>\n    import Help from '../editor/Help.html';\n    import Action from './Action.html';\n\n    import {__} from '../shared/l10n';\n    import {trackEvent} from '../shared/analytics';\n    import {getJSON, postJSON, loadScript, loadStylesheet} from '../shared/utils';\n    import computeEmbedHeights from './compute-embed-heights';\n\n\n    let fakeProgress = 0;\n    let initial_auto_publish = true;\n\n    export default {\n        components: { Help},\n        helpers: { __ },\n        computed: {\n\n            shareUrl ({ shareurl_type, $id, $publicUrl, plugin_shareurls, published }) {\n                if (!published) return 'https://www.datawrapper.de/...';\n                if (shareurl_type == 'default') return $publicUrl;\n                let url = '';\n                plugin_shareurls.forEach(t => {\n                    if (t.id == shareurl_type) url = t.url.replace(/%chart_id%/g, $id);\n                });\n                return url;\n            },\n\n            embedCode ({ embed_type, $metadata, $publicUrl }) {\n                if (!$metadata) return '';\n                if ($metadata.publish && !$metadata.publish['embed-codes'])\n                    return `<iframe src=\"${$publicUrl}\" width=\"100%\" height=\"${$metadata.publish['embed-height']}\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>`;\n                return $metadata.publish['embed-codes']['embed-method-'+embed_type];\n            },\n\n            sortedChartActions({chartActions, $actions}) {\n                return (chartActions.concat($actions))\n                    .filter(a => a.id != 'publish-s3')\n                    .sort((a,b) => a.order - b.order);\n            }\n        },\n        methods: {\n\n            publish () {\n                this.set({\n                    publishing: true,\n                    progress: 0,\n                    publish_error: false\n                });\n\n                const chart = this.store;\n                // generate embed codes\n                chart.setMetadata('publish.embed-heights',\n                    computeEmbedHeights(chart, this.get().embed_templates));\n\n                // save embed heights and wait until it's done before\n                // we start to publish the chart\n                trackEvent('Chart Editor', 'publish');\n\n                chart.store(() => {\n                    // publish chart\n                    postJSON(`/api/charts/${chart.get().id}/publish`, null, (res) => {\n                        if (res.status == 'ok') {\n                            this.publishFinished(res.data);\n                            trackEvent('Chart Editor', 'publish-success');\n                        } else {\n                            trackEvent('Chart Editor', 'publish-error', res.message);\n                            this.set({\n                                publish_error: res.message\n                            });\n                        }\n                    });\n                    fakeProgress = 0;\n                    this.updateStatus();\n                });\n            },\n\n            updateProgressBar (p) {\n                if (this.refs.bar) {\n                    this.refs.bar.style.width = (p*100).toFixed()+'%';\n                }\n            },\n\n            updateStatus () {\n                const chart = this.store;\n                fakeProgress += 0.05;\n                getJSON(`/api/charts/${chart.get().id}/publish/status`, (res) => {\n                    if (res) {\n                        res = (+res / 100) + fakeProgress;\n                        this.set({progress: Math.min(1,res)});\n                    }\n                    if (this.get().publishing) {\n                        setTimeout(() => { this.updateStatus(); },400);\n                    }\n                });\n            },\n\n            publishFinished (chartInfo) {\n                this.set({\n                    progress: 1,\n                    published: true,\n                    needs_republish: false\n                });\n                this.store.set({\n                    lastEditStep: 5\n                });\n                setTimeout(() => this.set({publishing: false}), 500);\n                this.store.set(chartInfo);\n            },\n\n            copy () {\n                const me = this;\n                me.refs.embedInput.select();\n                try {\n                    var successful = document.execCommand('copy');\n                    if (successful) {\n                        trackEvent('Chart Editor', 'embedcode-copy');\n                        me.set({copy_success: true});\n                        setTimeout(() => me.set({copy_success:false}), 300);\n                    }\n                } catch (err) {\n                    // console.log('Oops, unable to copy');\n                }\n            },\n\n            select(action, event) {\n                event.preventDefault();\n                const {active_action} = this.get();\n                if (action.id == active_action) {\n                    // unselect current action\n                    return this.set({ active_action:'', Action });\n                }\n                this.set({active_action: action.id});\n                if (action.mod) {\n                    if (action.mod.App) {\n                        this.set({ Action: action.mod.App });\n                    } else {\n                        // todo: show loading indicator\n                        this.set({Action});\n                        this.refs.action.set({loading: true});\n                        if (action.mod.css) {\n                            loadStylesheet(action.mod.css);\n                        }\n                        loadScript(action.mod.src, () => {\n                            setTimeout(() => {\n                                require([action.mod.id], (mod) => {\n                                    // todo: HIDE loading indicator\n                                    Object.assign(action.mod, mod);\n                                    this.set({Action: action.mod.App});\n                                    if (mod.init) mod.init(this.refs.action);\n                                    if (action.mod.data) this.refs.action.set(action.mod.data);\n                                });\n                            }, 200);\n                        });\n                    }\n                } else if (action.action && this[action.action]) {\n                    this.set({Action});\n                    this[action.action]();\n                }\n            },\n\n            duplicate() {\n                const {id} = this.store.get();\n                trackEvent('Chart Editor', 'duplicate');\n                postJSON(`/api/charts/${id}/copy`, null, (res) => {\n                    if (res.status == \"ok\") {\n                        // redirect to copied chart\n                        window.location.href = `/edit/${res.data.id}/visualize`;\n                    } else {\n                        console.warn(data);\n                    }\n                });\n            }\n        },\n\n        onstate({changed, current}) {\n            const userDataReady = window.dw && window.dw.backend && window.dw.backend.setUserData;\n            if (changed.publishing) {\n                if (current.publishing) this.updateProgressBar(current.progress);\n            }\n            if (changed.progress) {\n                this.updateProgressBar(current.progress);\n            }\n            if (changed.embed_type && userDataReady) {\n                const data = window.dw.backend.__userData;\n                if (!current.embed_type || !data) return;\n                data.embed_type = current.embed_type;\n                window.dw.backend.setUserData(data);\n            }\n            if (changed.shareurl_type && userDataReady) {\n                const data = window.dw.backend.__userData;\n                if (!current.shareurl_type || !data) return;\n                data.shareurl_type = current.shareurl_type;\n                window.dw.backend.setUserData(data);\n            }\n            if (changed.published) {\n                window.document\n                    .querySelector('.dw-create-publish .publish-step')\n                    .classList[current.published ? 'add' : 'remove']('is-published');\n            }\n            if (changed.auto_publish) {\n                if (current.auto_publish && initial_auto_publish) {\n                    this.publish();\n                    initial_auto_publish = false;\n                    window.history.replaceState('','', location.pathname);\n                }\n            }\n        },\n        oncreate() {\n            const {lastEditStep} = this.store.get();\n            this.set({published: lastEditStep > 4});\n        },\n        data() {\n            return {\n                active_action: '',\n                embed_templates: [],\n                plugin_shareurls: [],\n                published: false,\n                publishing: false,\n                needs_republish: false,\n                publish_error: false,\n                auto_publish: false,\n                progress: 0,\n                shareurl_type: 'default',\n                embed_type: 'responsive',\n                copy_success: false,\n                Action,\n                chartActions: [{\n                    id: 'duplicate',\n                    icon: 'code-fork',\n                    title: __('Duplicate'),\n                    order: 500,\n                    action: 'duplicate'\n                }],\n                publishHed: '',\n                publishIntro: '',\n                beforeExport: null,\n                exportHed: __('publish / export-duplicate'),\n                exportIntro: __('publish / export-duplicate / intro')\n            }\n        }\n    };\n</script>\n\n",
    "<div on:mouseenter=\"show()\" on:mouseleave=\"hide()\" class=\"help\">\n    <span>{#if visible}<i class=\"im im-graduation-hat\"></i>{:else}?{/if}</span>\n    {#if visible}\n    <div class=\"content\">\n        <slot />\n    </div>\n    {/if}\n</div>\n\n<style type=\"text/css\">\n    .help {\n        float: right;\n        position: relative;\n        z-index: 8000;\n    }\n\n    .help .content::after {\n        content: '';\n        position: absolute;\n        top: 8px;\n        right: 8px;\n    }\n\n    .help .content {\n        display: block;\n    }\n\n    .help .content {\n        /*display: none;*/\n        position: absolute;\n        top: -8px;\n        right: -8px;\n        padding: 8px 40px 8px 10px;\n        background: #18a1cd;\n        color: #fff;\n        width: 260px;\n        border-radius: 2px;\n        box-shadow: 3px 2px 2px rgba(0, 0, 0, 0.1);\n        z-index: 8000;\n    }\n\n    .help .content img {\n        max-width: none;\n    }\n\n    .help > span {\n        font-family: Roboto;\n        z-index: 100001;\n        font-weight: 400;\n        position: relative;\n        display: block;\n        width: 22px;\n        height: 22px;\n        line-height: 22px;\n        border-radius: 50%;\n        background: transparent;\n        text-align: center;\n        color: #6c6e6f66;\n        font-size: 16px;\n        top: -2px;\n    }\n\n    .help:hover > span {\n        background: #18a1cd;\n        color: #f9f9f9;\n    }\n    .help > span .im {\n        font-size: 16px;\n        color: #fff;\n    }\n</style>\n\n<script>\n\n    export default {\n        data() {\n            return {\n                visible: false\n            }\n        },\n        methods: {\n            show() {\n                const t = setTimeout(() => {\n                    this.set({visible: true});\n                }, 400);\n                this.set({t});\n            },\n            hide() {\n                const {t} = this.get();\n                clearTimeout(t);\n                this.set({visible:false});\n            }\n        }\n    }\n</script>\n",
    "{#if loginForm}\n    <!-- LOGIN -->\n    <h2>{@html __('login / login / headline')}</h2>\n    <p>{@html __('login / login / intro')}</p>\n\n    <div class=\"login-form\">\n        {#if successMsg}\n        <div class=\"alert alert-success\">{@html successMsg}</div>\n        {/if}\n        {#if errorMsg}\n        <div class=\"alert alert-error\">{@html errorMsg}</div>\n        {/if}\n        <form class=\"form-vertical\">\n            <div class=\"control-group {emailError?'error':''}\">\n                <label class=\"control-label\">{__('email')}</label>\n                <div class=\"controls\">\n                    <input  bind:value=\"email\" class=\"input-xlarge span3\" type=\"email\" placeholder=\"name@example.com\" />\n                    <span class=\"help-inline\">{emailError}</span>\n                </div>\n            </div>\n            {#if !resetPassword}\n            <div class=\"control-group {passwordError?'error':''}\">\n                <label class=\"control-label\">{__('password')}</label>\n                <div class=\"controls\">\n                    <input class=\"input-xlarge span3\" type=\"password\" bind:value=\"password\" placeholder=\"\" />\n                    <span class=\"help-inline\">{passwordError}</span>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <div class=\"controls\">\n                    <label class=\"checkbox\">\n                        <input type=\"checkbox\" bind:checked=\"keeplogin\">&nbsp;&nbsp;{__('Remember login?')}\n                    </label>\n                </div>\n            </div>\n            {/if}\n        </form>\n\n        {#if !resetPassword}\n        <button on:click=\"login(email, password, keeplogin)\" class=\"btn btn-large btn-primary\">\n            <i class=\"fa fa-sign-in fa-fw\"></i> {__('Login')}\n        </button>\n        &nbsp; or &nbsp;\n        <button on:click=\"toSignUp(event, true)\" class=\"btn btn-large\">\n            {@html __('login / signup / headline')}\n        </button>\n        {:else}\n        <button on:click=\"sendNewPassword(email)\" class=\"btn btn-large btn-info\">{__('Send new password')}</button>\n        {/if}\n\n        <div style=\"margin-top: 10px\">\n            {#if resetPassword}\n            <a on:click=\"resetPassword(event,false)\" href=\"#\">{__('Return to login...')}</a>\n            {:else}\n            <a on:click=\"resetPassword(event,true)\" href=\"#\">{__('Can\\'t recall your password?')}</a>\n            {/if}\n        </div>\n    </div>\n\n    {#if alternativeSignIns.length}\n    <div style=\"margin-top:10px\">\n        <hr />\n        <p>Alternatively, you can sign in using these providers:</p>\n        {#each alternativeSignIns as signin}\n        <a class=\"btn\" href=\"{signin.url}\"><i class=\"{signin.icon}\"></i> {signin.label}</a>&nbsp;&nbsp;\n        {/each}\n    </div>\n    {/if}\n\n{:else}\n    <!-- SIGN UP -->\n    <h2>{@html __('login / signup / headline')}</h2>\n    <p>{@html __('login / signup / intro')}</p>\n\n    <form class=\"form-vertical\">\n        <div class=\"control-group {emailError?'error':''}\">\n            <label class=\"control-label\">{__('email')}</label>\n            <div class=\"controls\">\n                <input data-lpignore=\"true\" bind:value=\"email\" class=\"input-xxlarge span3\" type=\"email\" placeholder=\"name@example.com\" />\n                <span class=\"help-inline\">{emailError}</span>\n            </div>\n        </div>\n        <div class=\"control-group {passwordError?'error':''}\">\n            <label class=\"control-label\">{__('password')}</label>\n            <div class=\"controls\">\n                <input data-lpignore=\"true\" class=\"input-xxlarge span3\" type=\"password\" bind:value=\"password\" placeholder=\"\" />\n                <span class=\"help-inline\">{passwordError}</span>\n            </div>\n        </div>\n        <div class=\"control-group {password2Error?'error':''}\">\n            <label class=\"control-label\">{__('repeat password')}</label>\n            <div class=\"controls\">\n                <input data-lpignore=\"true\" class=\"input-xxlarge span3\" type=\"password\" bind:value=\"password2\" placeholder=\"\" />\n                <span class=\"help-inline\">{password2Error}</span>\n            </div>\n        </div>\n\n    </form>\n\n    <a on:click=\"signUp()\" class=\"btn btn-large btn-primary\">\n        <i class=\"fa fa-pencil fa-fw\"></i> {__('Sign Up')}\n    </a>\n    &nbsp; or &nbsp;\n    <a on:click=\"toSignUp(event, false)\" class=\"btn btn-login btn-large\">\n        {__('Login')}\n    </a>\n{/if}\n\n<style>p {\n  font-size: 16px;\n  line-height: 1.5;\n}\ninput {\n  padding: 8px 6px;\n}\n.control-label {\n  text-transform: uppercase;\n  font-size: 13px!important;\n  letter-spacing: 2px;\n  font-weight: 400!important;\n  color: #999;\n}\n</style>\n\n<script>\n    import {__} from '../shared/l10n';\n    import {getJSON, postJSON} from '../shared/utils';\n    import CryptoJS from 'crypto-js';\n\n    export default {\n        helpers: {__},\n        computed: {\n            emailError({remoteEmailError}) {\n                if (remoteEmailError) return remoteEmailError;\n                return '';\n            },\n            passwordError({password, remotePasswordError}) {\n                if (remotePasswordError) return remotePasswordError;\n                if (!password) return '';\n                if (!password || password.length < 6) {\n                    return 'Password must be at least six characters';\n                }\n                return '';\n            },\n            password2Error({passwordError, password, password2}) {\n                if (passwordError) return '';\n                if (password2 != password) {\n                    return 'The two passwords must be identical';\n                }\n                return '';\n            }\n        },\n        oncreate() {\n            // get a list of signin methods\n            getJSON('/api/auth/alternative-signins', (res) => {\n                if (res.status == 'ok') {\n                    this.set({alternativeSignIns: res.data});\n                }\n            });\n        },\n\n        methods: {\n            login(email, password, keeplogin) {\n                const pwhash = this.encryptPassword(password);\n                postJSON('/api/auth/login',\n                    JSON.stringify({email, pwhash, keeplogin}),\n                    (res) => {\n                        if (res.status == 'ok') {\n                            this.store.set({user: res.data});\n                        } else {\n                            console.log('error', res);\n                            // this.set({\n                            //     resetPassword: false,\n                            //     remoteEmailError: res.message\n                            // });\n                        }\n                    }\n                );\n            },\n            signUp() {\n\n            },\n            reset() {\n                this.set({\n                    successMsg: '',\n                    errorMsg: '',\n                    remotePasswordError: '',\n                    remoteEmailError: ''\n                });\n            },\n            sendNewPassword(email) {\n                if (!email) {\n                    return this.set({\n                        errorMsg: 'email must not be empty'\n                    });\n                }\n                this.reset();\n                postJSON('/api/account/reset-password',\n                    JSON.stringify({email}),\n                    (res) => {\n                        if (res.status == 'ok') {\n                            this.set({ resetPassword: false, successMsg: res.data });\n                        } else {\n                            this.set({\n                                resetPassword: false,\n                                remoteEmailError: res.message\n                            });\n                        }\n                    }\n                );\n\n            },\n            toSignUp(event, state) {\n                event.preventDefault();\n                this.set({loginForm: !state});\n            },\n            resetPassword(event, state) {\n                event.preventDefault();\n                this.set({resetPassword: state});\n            },\n            encryptPassword(pwd) {\n                const SALT = window.dw.backend.__auth_salt;\n                return CryptoJS.HmacSHA256(pwd, SALT).toString();\n            }\n        },\n        data() {\n            return {\n                successMsg: '',\n                errorMsg: '',\n                email: '',\n                password: '',\n                password2: '',\n                remoteEmailError: '',\n                remotePasswordError: '',\n                keeplogin: true,\n                loginForm: true,\n                resetPassword: false,\n                alternativeSignIns: []\n            }\n        }\n    }\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}